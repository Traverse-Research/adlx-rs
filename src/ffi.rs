/* automatically generated by rust-bindgen 0.69.4 */

pub const ADLX_VER_MAJOR: u32 = 1;
pub const ADLX_VER_MINOR: u32 = 2;
pub const ADLX_VER_RELEASE: u32 = 0;
pub const ADLX_VER_BUILD_NUM: u32 = 72;
pub const ADLX_DLL_NAMEW: &[u8; 14] = b"amdadlx64.dll\0";
pub const ADLX_DLL_NAMEA: &[u8; 14] = b"amdadlx64.dll\0";
pub const ADLX_DLL_NAME: &[u8; 14] = b"amdadlx64.dll\0";
pub const ADLX_QUERY_FULL_VERSION_FUNCTION_NAME: &[u8; 21] = b"ADLXQueryFullVersion\0";
pub const ADLX_QUERY_VERSION_FUNCTION_NAME: &[u8; 17] = b"ADLXQueryVersion\0";
pub const ADLX_INIT_FUNCTION_NAME: &[u8; 15] = b"ADLXInitialize\0";
pub const ADLX_INIT_WITH_INCOMPATIBLE_DRIVER_FUNCTION_NAME: &[u8; 37] =
    b"ADLXInitializeWithIncompatibleDriver\0";
pub const ADLX_INIT_WITH_CALLER_ADL_FUNCTION_NAME: &[u8; 28] = b"ADLXInitializeWithCallerAdl\0";
pub const ADLX_TERMINATE_FUNCTION_NAME: &[u8; 14] = b"ADLXTerminate\0";
pub type wchar_t = ::std::os::raw::c_ushort;
pub type adlx_int64 = i64;
pub type adlx_int32 = i32;
pub type adlx_uint64 = u64;
pub type adlx_uint32 = u32;
pub type adlx_uint16 = u16;
pub type adlx_uint8 = u8;
pub type adlx_size = usize;
pub type adlx_handle = *mut ::std::os::raw::c_void;
pub type adlx_double = f64;
pub type adlx_long = ::std::os::raw::c_long;
pub type adlx_int = adlx_int32;
pub type adlx_uint = adlx_uint32;
pub type adlx_bool = adlx_uint8;
#[doc = "< @ENG_START_DOX This result indicates success. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_OK: ADLX_RESULT = 0;
#[doc = "< @ENG_START_DOX This result indicates that the asked action is already enabled. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_ALREADY_ENABLED: ADLX_RESULT = 1;
#[doc = "< @ENG_START_DOX This result indicates that ADLX has a unspecified type of initialization. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_ALREADY_INITIALIZED: ADLX_RESULT = 2;
#[doc = "< @ENG_START_DOX This result indicates an unspecified failure. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_FAIL: ADLX_RESULT = 3;
#[doc = "< @ENG_START_DOX This result indicates that the arguments are invalid. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_INVALID_ARGS: ADLX_RESULT = 4;
#[doc = "< @ENG_START_DOX This result indicates that the asked version is incompatible with the current version. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_BAD_VER: ADLX_RESULT = 5;
#[doc = "< @ENG_START_DOX This result indicates that an unknown interface was asked. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_UNKNOWN_INTERFACE: ADLX_RESULT = 6;
#[doc = "< @ENG_START_DOX This result indicates that the calls were made in an interface after ADLX was terminated. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_TERMINATED: ADLX_RESULT = 7;
#[doc = "< @ENG_START_DOX This result indicates that the ADL initialization failed. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_ADL_INIT_ERROR: ADLX_RESULT = 8;
#[doc = "< @ENG_START_DOX This result indicates that the item is not found. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_NOT_FOUND: ADLX_RESULT = 9;
#[doc = "< @ENG_START_DOX This result indicates that the method was called into an invalid object. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_INVALID_OBJECT: ADLX_RESULT = 10;
#[doc = "< @ENG_START_DOX This result indicates that ADLX was terminated with outstanding ADLX objects. Any interface obtained from ADLX points to invalid memory and calls in their methods will result in unexpected behavior. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_ORPHAN_OBJECTS: ADLX_RESULT = 11;
#[doc = "< @ENG_START_DOX This result indicates that the asked feature is not supported. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_NOT_SUPPORTED: ADLX_RESULT = 12;
#[doc = "< @ENG_START_DOX This result indicates a failure due to an operation currently in progress. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_PENDING_OPERATION: ADLX_RESULT = 13;
#[doc = "< @ENG_START_DOX This result indicates that the GPU is inactive. @ENG_END_DOX"]
pub const ADLX_RESULT_ADLX_GPU_INACTIVE: ADLX_RESULT = 14;
#[doc = " @enum ADLX_RESULT\n @ingroup enumerations\n @ENG_START_DOX\n @brief Indicates the result returned from an ADLX function or from an ADLX method.\n @ENG_END_DOX"]
pub type ADLX_RESULT = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX This is not a Hybrid Graphics system. @ENG_END_DOX"]
pub const ADLX_HG_TYPE_NONE: ADLX_HG_TYPE = 0;
#[doc = "< @ENG_START_DOX This is an AMD integrated GPU. @ENG_END_DOX"]
pub const ADLX_HG_TYPE_AMD: ADLX_HG_TYPE = 1;
#[doc = "< @ENG_START_DOX This is a non-AMD integrated GPU. @ENG_END_DOX"]
pub const ADLX_HG_TYPE_OTHER: ADLX_HG_TYPE = 2;
#[doc = " @enum ADLX_HG_TYPE\n @ingroup enumerations\n @ENG_START_DOX\n @brief Indicates the type of Hybrid Graphic.\n @ENG_END_DOX"]
pub type ADLX_HG_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The ASIC family type is not defined. @ENG_END_DOX"]
pub const ADLX_ASIC_FAMILY_TYPE_ASIC_UNDEFINED: ADLX_ASIC_FAMILY_TYPE = 0;
#[doc = "< @ENG_START_DOX The ASIC family type is discrete. @ENG_END_DOX"]
pub const ADLX_ASIC_FAMILY_TYPE_ASIC_RADEON: ADLX_ASIC_FAMILY_TYPE = 1;
#[doc = "< @ENG_START_DOX The ASIC family type is Firepro. @ENG_END_DOX"]
pub const ADLX_ASIC_FAMILY_TYPE_ASIC_FIREPRO: ADLX_ASIC_FAMILY_TYPE = 2;
#[doc = "< @ENG_START_DOX The ASIC family type is FireMV. @ENG_END_DOX"]
pub const ADLX_ASIC_FAMILY_TYPE_ASIC_FIREMV: ADLX_ASIC_FAMILY_TYPE = 3;
#[doc = "< @ENG_START_DOX The ASIC family type is FireStream. @ENG_END_DOX"]
pub const ADLX_ASIC_FAMILY_TYPE_ASIC_FIRESTREAM: ADLX_ASIC_FAMILY_TYPE = 4;
#[doc = "< @ENG_START_DOX The ASIC family type is Fusion. @ENG_END_DOX"]
pub const ADLX_ASIC_FAMILY_TYPE_ASIC_FUSION: ADLX_ASIC_FAMILY_TYPE = 5;
#[doc = "< @ENG_START_DOX The ASIC family type is Embedded. @ENG_END_DOX"]
pub const ADLX_ASIC_FAMILY_TYPE_ASIC_EMBEDDED: ADLX_ASIC_FAMILY_TYPE = 6;
#[doc = " @enum ADLX_ASIC_FAMILY_TYPE\n @ingroup enumerations\n @ENG_START_DOX\n @brief Indicates the ASIC family type.\n @ENG_END_DOX"]
pub type ADLX_ASIC_FAMILY_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The PCI bus type is not defined. @ENG_END_DOX"]
pub const ADLX_PCI_BUS_TYPE_UNDEFINED: ADLX_PCI_BUS_TYPE = 0;
#[doc = "< @ENG_START_DOX The PCI bus type is PCI bus. @ENG_END_DOX"]
pub const ADLX_PCI_BUS_TYPE_PCI: ADLX_PCI_BUS_TYPE = 1;
#[doc = "< @ENG_START_DOX The PCI bus type is AGP bus. @ENG_END_DOX"]
pub const ADLX_PCI_BUS_TYPE_AGP: ADLX_PCI_BUS_TYPE = 2;
#[doc = "< @ENG_START_DOX The PCI bus type is PCI Express bus. @ENG_END_DOX"]
pub const ADLX_PCI_BUS_TYPE_PCIE: ADLX_PCI_BUS_TYPE = 3;
#[doc = "< @ENG_START_DOX The PCI bus type is PCI Express 2nd generation bus. @ENG_END_DOX"]
pub const ADLX_PCI_BUS_TYPE_PCIE_2_0: ADLX_PCI_BUS_TYPE = 4;
#[doc = "< @ENG_START_DOX The PCI bus type is PCI Express 3rd generation bus. @ENG_END_DOX"]
pub const ADLX_PCI_BUS_TYPE_PCIE_3_0: ADLX_PCI_BUS_TYPE = 5;
#[doc = "< @ENG_START_DOX The PCI bus type is PCI Express 4th generation bus. @ENG_END_DOX"]
pub const ADLX_PCI_BUS_TYPE_PCIE_4_0: ADLX_PCI_BUS_TYPE = 6;
#[doc = " @enum ADLX_PCI_BUS_TYPE\n @ingroup enumerations\n @ENG_START_DOX\n @brief Indicates the PCI bus type.\n @ENG_END_DOX"]
pub type ADLX_PCI_BUS_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The DP link rate is unknown. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_UNKNOWN: ADLX_DP_LINK_RATE = 0;
#[doc = "< @ENG_START_DOX The DP link rate is 1.62 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_RBR: ADLX_DP_LINK_RATE = 1;
#[doc = "< @ENG_START_DOX The DP link rate is 2.16 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_2_16GBPS: ADLX_DP_LINK_RATE = 2;
#[doc = "< @ENG_START_DOX The DP link rate is 2.43 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_2_43GBPS: ADLX_DP_LINK_RATE = 3;
#[doc = "< @ENG_START_DOX The DP link rate is 2.70 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_HBR: ADLX_DP_LINK_RATE = 4;
#[doc = "< @ENG_START_DOX The DP link rate is 4.32 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_4_32GBPS: ADLX_DP_LINK_RATE = 5;
#[doc = "< @ENG_START_DOX The DP link rate is 5.40 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_HBR2: ADLX_DP_LINK_RATE = 6;
#[doc = "< @ENG_START_DOX The DP link rate is 8.10 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_HBR3: ADLX_DP_LINK_RATE = 7;
#[doc = "< @ENG_START_DOX The DP link rate is 10 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_UHBR10: ADLX_DP_LINK_RATE = 8;
#[doc = "< @ENG_START_DOX The DP link rate is 13.5 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_UHBR13D5: ADLX_DP_LINK_RATE = 9;
#[doc = "< @ENG_START_DOX The DP link rate is 20 Gbps/Lane. @ENG_END_DOX"]
pub const ADLX_DP_LINK_RATE_DP_LINK_RATE_UHBR20: ADLX_DP_LINK_RATE = 10;
#[doc = " @enum ADLX_DP_LINK_RATE\n @ingroup enumerations\n @ENG_START_DOX\n @brief Indicates the DP link rate.\n @ENG_END_DOX"]
pub type ADLX_DP_LINK_RATE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The GPU type is unknown. @ENG_END_DOX"]
pub const ADLX_GPU_TYPE_GPUTYPE_UNDEFINED: ADLX_GPU_TYPE = 0;
#[doc = "< @ENG_START_DOX The GPU type is an integrated GPU. @ENG_END_DOX"]
pub const ADLX_GPU_TYPE_GPUTYPE_INTEGRATED: ADLX_GPU_TYPE = 1;
#[doc = "< @ENG_START_DOX The GPU type is a discrete GPU. @ENG_END_DOX"]
pub const ADLX_GPU_TYPE_GPUTYPE_DISCRETE: ADLX_GPU_TYPE = 2;
#[doc = " @enum ADLX_GPU_TYPE\n @ingroup enumerations\n @ENG_START_DOX\n @brief Indicates the GPU type.\n @ENG_END_DOX"]
pub type ADLX_GPU_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The display connector type is unknown. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_UNKNOWN: ADLX_DISPLAY_CONNECTOR_TYPE = 0;
#[doc = "< @ENG_START_DOX The display connector type is VGA. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_VGA: ADLX_DISPLAY_CONNECTOR_TYPE = 1;
#[doc = "< @ENG_START_DOX The display connector type is DVI-D. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_DVI_D: ADLX_DISPLAY_CONNECTOR_TYPE = 2;
#[doc = "< @ENG_START_DOX The display connector type is DVI-I. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_DVI_I: ADLX_DISPLAY_CONNECTOR_TYPE = 3;
#[doc = "< @ENG_START_DOX The display connector type is NTSC. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_CVDONGLE_NTSC: ADLX_DISPLAY_CONNECTOR_TYPE =
    4;
#[doc = "< @ENG_START_DOX The display connector type is JPN. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_CVDONGLE_JPN: ADLX_DISPLAY_CONNECTOR_TYPE = 5;
#[doc = "< @ENG_START_DOX The display connector type is NONI2C-JPN. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN:
    ADLX_DISPLAY_CONNECTOR_TYPE = 6;
#[doc = "< @ENG_START_DOX The display connector type is NONI2C-NTSC. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC:
    ADLX_DISPLAY_CONNECTOR_TYPE = 7;
#[doc = "< @ENG_START_DOX The display connector type is PROPRIETARY. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_PROPRIETARY: ADLX_DISPLAY_CONNECTOR_TYPE = 8;
#[doc = "< @ENG_START_DOX The display connector type is HDMI A. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_HDMI_TYPE_A: ADLX_DISPLAY_CONNECTOR_TYPE = 9;
#[doc = "< @ENG_START_DOX The display connector type is HDMI B. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_HDMI_TYPE_B: ADLX_DISPLAY_CONNECTOR_TYPE = 10;
#[doc = "< @ENG_START_DOX The display connector type is SVIDEO. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_SVIDEO: ADLX_DISPLAY_CONNECTOR_TYPE = 11;
#[doc = "< @ENG_START_DOX The display connector type is COMPOSITE. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_COMPOSITE: ADLX_DISPLAY_CONNECTOR_TYPE = 12;
#[doc = "< @ENG_START_DOX The display connector type is RCA. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_RCA_3COMPONENT: ADLX_DISPLAY_CONNECTOR_TYPE =
    13;
#[doc = "< @ENG_START_DOX The display connector type is DISPLAYPORT. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_DISPLAYPORT: ADLX_DISPLAY_CONNECTOR_TYPE = 14;
#[doc = "< @ENG_START_DOX The display connector type is EDP. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_EDP: ADLX_DISPLAY_CONNECTOR_TYPE = 15;
#[doc = "< @ENG_START_DOX The display connector type is WIRELESSDISPLAY. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_WIRELESSDISPLAY: ADLX_DISPLAY_CONNECTOR_TYPE =
    16;
#[doc = "< @ENG_START_DOX The display connector type is USB Type-C. @ENG_END_DOX"]
pub const ADLX_DISPLAY_CONNECTOR_TYPE_DISPLAY_CONTYPE_USB_TYPE_C: ADLX_DISPLAY_CONNECTOR_TYPE = 17;
#[doc = "  @enum ADLX_DISPLAY_CONNECTOR_TYPE\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Indicates the display connector type.\n  @ENG_END_DOX"]
pub type ADLX_DISPLAY_CONNECTOR_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The display type is an unknown display. @ENG_END_DOX"]
pub const ADLX_DISPLAY_TYPE_DISPLAY_TYPE_UNKOWN: ADLX_DISPLAY_TYPE = 0;
#[doc = "< @ENG_START_DOX The display type is a monitor display. @ENG_END_DOX"]
pub const ADLX_DISPLAY_TYPE_DISPLAY_TYPE_MONITOR: ADLX_DISPLAY_TYPE = 1;
#[doc = "< @ENG_START_DOX The display type is a TV display. @ENG_END_DOX"]
pub const ADLX_DISPLAY_TYPE_DISPLAY_TYPE_TELEVISION: ADLX_DISPLAY_TYPE = 2;
#[doc = "< @ENG_START_DOX The display type is an LCD display. @ENG_END_DOX"]
pub const ADLX_DISPLAY_TYPE_DISPLAY_TYPE_LCD_PANEL: ADLX_DISPLAY_TYPE = 3;
#[doc = "< @ENG_START_DOX The display type is a DFP display. @ENG_END_DOX"]
pub const ADLX_DISPLAY_TYPE_DISPLAY_TYPE_DIGITAL_FLAT_PANEL: ADLX_DISPLAY_TYPE = 4;
#[doc = "< @ENG_START_DOX The display type is a component video display. @ENG_END_DOX"]
pub const ADLX_DISPLAY_TYPE_DISPLAY_TYPE_COMPONENT_VIDEO: ADLX_DISPLAY_TYPE = 5;
#[doc = "< @ENG_START_DOX The display type is a projector display. @ENG_END_DOX"]
pub const ADLX_DISPLAY_TYPE_DISPLAY_TYPE_PROJECTOR: ADLX_DISPLAY_TYPE = 6;
#[doc = "  @enum ADLX_DISPLAY_TYPE\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Indicates the display type.\n  @ENG_END_DOX"]
pub type ADLX_DISPLAY_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The display scan type is progressive mode. @ENG_END_DOX"]
pub const ADLX_DISPLAY_SCAN_TYPE_PROGRESSIVE: ADLX_DISPLAY_SCAN_TYPE = 0;
#[doc = "< @ENG_START_DOX The display scan type is interlaced mode. @ENG_END_DOX"]
pub const ADLX_DISPLAY_SCAN_TYPE_INTERLACED: ADLX_DISPLAY_SCAN_TYPE = 1;
#[doc = "  @enum ADLX_DISPLAY_SCAN_TYPE\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Indicates the display scan type.\n  @ENG_END_DOX"]
pub type ADLX_DISPLAY_SCAN_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX Positive Polarity @ENG_END_DOX"]
pub const ADLX_DISPLAY_TIMING_POLARITY_POSITIVE: ADLX_DISPLAY_TIMING_POLARITY = 0;
#[doc = "< @ENG_START_DOX Negative Polarity @ENG_END_DOX"]
pub const ADLX_DISPLAY_TIMING_POLARITY_NEGATIVE: ADLX_DISPLAY_TIMING_POLARITY = 1;
#[doc = "  @enum ADLX_DISPLAY_TIMING_POLARITY\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Display timing polarity\n  @ENG_END_DOX"]
pub type ADLX_DISPLAY_TIMING_POLARITY = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX Maximum pixel clock @ENG_END_DOX"]
pub const ADLX_DISPLAY_TIMING_LIMITATION_PIXEL_CLOCK_MAX: ADLX_DISPLAY_TIMING_LIMITATION = 650000;
#[doc = "< @ENG_START_DOX Minimum pixel clock @ENG_END_DOX"]
pub const ADLX_DISPLAY_TIMING_LIMITATION_PIXEL_CLOCK_MIN: ADLX_DISPLAY_TIMING_LIMITATION = 0;
#[doc = "< @ENG_START_DOX Maximum refresh rate @ENG_END_DOX"]
pub const ADLX_DISPLAY_TIMING_LIMITATION_REFRESH_RATE_MAX: ADLX_DISPLAY_TIMING_LIMITATION = 200;
#[doc = "< @ENG_START_DOX Minimum refresh rate @ENG_END_DOX"]
pub const ADLX_DISPLAY_TIMING_LIMITATION_REFRESH_RATE_MIN: ADLX_DISPLAY_TIMING_LIMITATION = 1;
#[doc = "< @ENG_START_DOX Maximum resolution @ENG_END_DOX"]
pub const ADLX_DISPLAY_TIMING_LIMITATION_RESOLUTION_MAX: ADLX_DISPLAY_TIMING_LIMITATION = 9999;
#[doc = "< @ENG_START_DOX Minimum resolution @ENG_END_DOX"]
pub const ADLX_DISPLAY_TIMING_LIMITATION_RESOLUTION_MIN: ADLX_DISPLAY_TIMING_LIMITATION = 1;
#[doc = "  @enum ADLX_DISPLAY_TIMING_LIMITATION\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Display timing limitation\n  @ENG_END_DOX"]
pub type ADLX_DISPLAY_TIMING_LIMITATION = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The predefined gamut space is GAMUT_SPACE_CCIR_709. @ENG_END_DOX"]
pub const ADLX_GAMUT_SPACE_GAMUT_SPACE_CCIR_709: ADLX_GAMUT_SPACE = 0;
#[doc = "< @ENG_START_DOX The predefined gamut space is GAMUT_SPACE_CCIR_601. @ENG_END_DOX"]
pub const ADLX_GAMUT_SPACE_GAMUT_SPACE_CCIR_601: ADLX_GAMUT_SPACE = 1;
#[doc = "< @ENG_START_DOX The predefined gamut space is GAMUT_SPACE_ADOBE_RGB. @ENG_END_DOX"]
pub const ADLX_GAMUT_SPACE_GAMUT_SPACE_ADOBE_RGB: ADLX_GAMUT_SPACE = 2;
#[doc = "< @ENG_START_DOX The predefined gamut space is GAMUT_SPACE_CIE_RGB. @ENG_END_DOX"]
pub const ADLX_GAMUT_SPACE_GAMUT_SPACE_CIE_RGB: ADLX_GAMUT_SPACE = 3;
#[doc = "< @ENG_START_DOX The predefined gamut space is GAMUT_SPACE_CCIR_2020. @ENG_END_DOX"]
pub const ADLX_GAMUT_SPACE_GAMUT_SPACE_CCIR_2020: ADLX_GAMUT_SPACE = 4;
#[doc = "< @ENG_START_DOX The predefined gamut space is GAMUT_SPACE_CUSTOM. @ENG_END_DOX"]
pub const ADLX_GAMUT_SPACE_GAMUT_SPACE_CUSTOM: ADLX_GAMUT_SPACE = 5;
#[doc = "  @enum ADLX_GAMUT_SPACE\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Indicates the predefined gamut space.\n  @ENG_END_DOX"]
pub type ADLX_GAMUT_SPACE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The white point setting is 5000k. @ENG_END_DOX"]
pub const ADLX_WHITE_POINT_WHITE_POINT_5000K: ADLX_WHITE_POINT = 0;
#[doc = "< @ENG_START_DOX The white point setting is 6500k. @ENG_END_DOX"]
pub const ADLX_WHITE_POINT_WHITE_POINT_6500K: ADLX_WHITE_POINT = 1;
#[doc = "< @ENG_START_DOX The white point setting is 7500k. @ENG_END_DOX"]
pub const ADLX_WHITE_POINT_WHITE_POINT_7500K: ADLX_WHITE_POINT = 2;
#[doc = "< @ENG_START_DOX The white point setting is 9300k. @ENG_END_DOX"]
pub const ADLX_WHITE_POINT_WHITE_POINT_9300K: ADLX_WHITE_POINT = 3;
#[doc = "< @ENG_START_DOX The white point setting is customized. @ENG_END_DOX"]
pub const ADLX_WHITE_POINT_WHITE_POINT_CUSTOM: ADLX_WHITE_POINT = 4;
#[doc = "  @enum ADLX_WHITE_POINT\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Indicates the standardized white point setting.\n  @ENG_END_DOX"]
pub type ADLX_WHITE_POINT = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The gamma type is unknown. @ENG_END_DOX"]
pub const ADLX_GAMMA_TYPE_UNKNOW: ADLX_GAMMA_TYPE = 0;
#[doc = "< @ENG_START_DOX The gamma type is Degamma Ramp way. @ENG_END_DOX"]
pub const ADLX_GAMMA_TYPE_DEGAMMA_RAMP: ADLX_GAMMA_TYPE = 1;
#[doc = "< @ENG_START_DOX The gamma type is Regamma Ramp way. @ENG_END_DOX"]
pub const ADLX_GAMMA_TYPE_REGAMMA_RAMP: ADLX_GAMMA_TYPE = 2;
#[doc = "< @ENG_START_DOX The gamma type is Degamma coefficients way. @ENG_END_DOX"]
pub const ADLX_GAMMA_TYPE_DEGAMMA_COEFFICIENTS: ADLX_GAMMA_TYPE = 3;
#[doc = "< @ENG_START_DOX The gamma type is Regamma coefficients way. @ENG_END_DOX"]
pub const ADLX_GAMMA_TYPE_REGAMMA_COEFFICIENTS: ADLX_GAMMA_TYPE = 4;
#[doc = "  @enum ADLX_GAMMA_TYPE\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Indicates the gamma type.\n  @ENG_END_DOX"]
pub type ADLX_GAMMA_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The orientation is landscape. @ENG_END_DOX"]
pub const ADLX_ORIENTATION_ORIENTATION_LANDSCAPE: ADLX_ORIENTATION = 0;
#[doc = "< @ENG_START_DOX The orientation is Portrait. @ENG_END_DOX"]
pub const ADLX_ORIENTATION_ORIENTATION_PORTRAIT: ADLX_ORIENTATION = 90;
#[doc = "< @ENG_START_DOX The orientation is landscape (flipped). @ENG_END_DOX"]
pub const ADLX_ORIENTATION_ORIENTATION_LANDSCAPE_FLIPPED: ADLX_ORIENTATION = 180;
#[doc = "< @ENG_START_DOX the orientation is Portrait (flipped). @ENG_END_DOX"]
pub const ADLX_ORIENTATION_ORIENTATION_PORTRAIT_FLIPPED: ADLX_ORIENTATION = 270;
#[doc = "  @enum ADLX_ORIENTATION\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Indicates the orientation.\n  @ENG_END_DOX"]
pub type ADLX_ORIENTATION = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX Single display desktop: one display showing the entire desktop @ENG_END_DOX"]
pub const ADLX_DESKTOP_TYPE_DESKTOP_SINGLE: ADLX_DESKTOP_TYPE = 0;
#[doc = "< @ENG_START_DOX Duplicate desktop: two or more displays each show the entire desktop @ENG_END_DOX"]
pub const ADLX_DESKTOP_TYPE_DESKTOP_DUPLCATE: ADLX_DESKTOP_TYPE = 1;
#[doc = "< @ENG_START_DOX AMD Eyefinity desktop: two or more displays each show a portion of the desktop @ENG_END_DOX"]
pub const ADLX_DESKTOP_TYPE_DESKTOP_EYEFINITY: ADLX_DESKTOP_TYPE = 2;
#[doc = "  @enum ADLX_DESKTOP_TYPE\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Types of desktops in respect to display composition\n  @ENG_END_DOX"]
pub type ADLX_DESKTOP_TYPE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The log captures errors, warnings and debug information. @ENG_END_DOX"]
pub const ADLX_LOG_SEVERITY_LDEBUG: ADLX_LOG_SEVERITY = 0;
#[doc = "< @ENG_START_DOX The log captures errors and warnings. @ENG_END_DOX"]
pub const ADLX_LOG_SEVERITY_LWARNING: ADLX_LOG_SEVERITY = 1;
#[doc = "< @ENG_START_DOX The log captures errors. @ENG_END_DOX"]
pub const ADLX_LOG_SEVERITY_LERROR: ADLX_LOG_SEVERITY = 2;
#[doc = " @enum ADLX_LOG_SEVERITY\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the severity level for ADLX logs.\n @ENG_END_DOX\n"]
pub type ADLX_LOG_SEVERITY = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The log destination is a file. @ENG_END_DOX"]
pub const ADLX_LOG_DESTINATION_LOCALFILE: ADLX_LOG_DESTINATION = 0;
#[doc = "< @ENG_START_DOX The log destination is the application debugger. @ENG_END_DOX"]
pub const ADLX_LOG_DESTINATION_DBGVIEW: ADLX_LOG_DESTINATION = 1;
#[doc = "< @ENG_START_DOX The log destination is the application. @ENG_END_DOX"]
pub const ADLX_LOG_DESTINATION_APPLICATION: ADLX_LOG_DESTINATION = 2;
#[doc = " @enum ADLX_LOG_DESTINATION\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the location of the log traces that are generated from the internal code execution of ADLX.\n @ENG_END_DOX\n"]
pub type ADLX_LOG_DESTINATION = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The scale mode preserves aspect ratio. @ENG_END_DOX"]
pub const ADLX_SCALE_MODE_PRESERVE_ASPECT_RATIO: ADLX_SCALE_MODE = 0;
#[doc = "< @ENG_START_DOX The scale mode extends to full panel. @ENG_END_DOX"]
pub const ADLX_SCALE_MODE_FULL_PANEL: ADLX_SCALE_MODE = 1;
#[doc = "< @ENG_START_DOX The scale mode is centered on screen. @ENG_END_DOX"]
pub const ADLX_SCALE_MODE_CENTERED: ADLX_SCALE_MODE = 2;
#[doc = " @enum ADLX_SCALE_MODE\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the methods to stretch and position the image to fit on the display.\n @ENG_END_DOX\n"]
pub type ADLX_SCALE_MODE = ::std::os::raw::c_int;
pub const ADLX_COLOR_DEPTH_BPC_UNKNOWN: ADLX_COLOR_DEPTH = 0;
#[doc = "< @ENG_START_DOX A color component/pixel with 6 bits @ENG_END_DOX"]
pub const ADLX_COLOR_DEPTH_BPC_6: ADLX_COLOR_DEPTH = 1;
#[doc = "< @ENG_START_DOX A color component/pixel with 8 bits @ENG_END_DOX"]
pub const ADLX_COLOR_DEPTH_BPC_8: ADLX_COLOR_DEPTH = 2;
#[doc = "< @ENG_START_DOX A color component/pixel with 10 bits @ENG_END_DOX"]
pub const ADLX_COLOR_DEPTH_BPC_10: ADLX_COLOR_DEPTH = 3;
#[doc = "< @ENG_START_DOX A color component/pixel with 12 bits @ENG_END_DOX"]
pub const ADLX_COLOR_DEPTH_BPC_12: ADLX_COLOR_DEPTH = 4;
#[doc = "< @ENG_START_DOX A color component/pixel with 14 bits @ENG_END_DOX"]
pub const ADLX_COLOR_DEPTH_BPC_14: ADLX_COLOR_DEPTH = 5;
#[doc = "< @ENG_START_DOX A color component/pixel with 16 bits @ENG_END_DOX"]
pub const ADLX_COLOR_DEPTH_BPC_16: ADLX_COLOR_DEPTH = 6;
#[doc = " @enum ADLX_COLOR_DEPTH\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the color/bit depth, which is the number of bits used to indicate the color of a single pixel.\n @ENG_END_DOX\n"]
pub type ADLX_COLOR_DEPTH = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The pixel format is unknown. @ENG_END_DOX"]
pub const ADLX_PIXEL_FORMAT_FORMAT_UNKNOWN: ADLX_PIXEL_FORMAT = 0;
#[doc = "< @ENG_START_DOX The pixel format is RGB 4:4:4 PC Standard (Full RGB). @ENG_END_DOX"]
pub const ADLX_PIXEL_FORMAT_RGB_444_FULL: ADLX_PIXEL_FORMAT = 1;
#[doc = "< @ENG_START_DOX The pixel format is YCbCr 4:4:4. @ENG_END_DOX"]
pub const ADLX_PIXEL_FORMAT_YCBCR_444: ADLX_PIXEL_FORMAT = 2;
#[doc = "< @ENG_START_DOX The pixel format is YCbCr 4:2:2. @ENG_END_DOX"]
pub const ADLX_PIXEL_FORMAT_YCBCR_422: ADLX_PIXEL_FORMAT = 3;
#[doc = "< @ENG_START_DOX The pixel format is RGB 4:4:4 Studio (Limited RGB). @ENG_END_DOX"]
pub const ADLX_PIXEL_FORMAT_RGB_444_LIMITED: ADLX_PIXEL_FORMAT = 4;
#[doc = "< @ENG_START_DOX The pixel format is YCbCr 4:2:0 Pixel Format. @ENG_END_DOX"]
pub const ADLX_PIXEL_FORMAT_YCBCR_420: ADLX_PIXEL_FORMAT = 5;
#[doc = " @enum ADLX_PIXEL_FORMAT\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the pixel format to encode images for the display.\n @ENG_END_DOX\n"]
pub type ADLX_PIXEL_FORMAT = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX Coordinated Video Timings(CVT) VESA standard for generating and defining the display timings. @ENG_END_DOX"]
pub const ADLX_TIMING_STANDARD_CVT: ADLX_TIMING_STANDARD = 0;
#[doc = "< @ENG_START_DOX Coordinated Video Timings-Reduced Blanking(CVT-RB).Reduces horizontal and vertical blanking\nperiods and allows a lower pixel clock rate and higher frame rates. @ENG_END_DOX"]
pub const ADLX_TIMING_STANDARD_CVT_RB: ADLX_TIMING_STANDARD = 1;
#[doc = "< @ENG_START_DOX Generalized Timing Formula(GTF). A method of generating industry standard display timings. @ENG_END_DOX"]
pub const ADLX_TIMING_STANDARD_GTF: ADLX_TIMING_STANDARD = 2;
#[doc = "< @ENG_START_DOX Display Monitor Timmings(DMT). VESA standard that lists pre-defined display timings for various resolutions and display sizes. @ENG_END_DOX"]
pub const ADLX_TIMING_STANDARD_DMT: ADLX_TIMING_STANDARD = 3;
#[doc = "< @ENG_START_DOX Manual control @ENG_END_DOX"]
pub const ADLX_TIMING_STANDARD_MANUAL: ADLX_TIMING_STANDARD = 4;
#[doc = " @enum ADLX_TIMING_STANDARD\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Timing standard for custom resolution\n @ENG_END_DOX\n"]
pub type ADLX_TIMING_STANDARD = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX VSync is always off. @ENG_END_DOX"]
pub const ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE_WFVR_ALWAYS_OFF: ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE =
    0;
#[doc = "< @ENG_START_DOX VSync is off, unless specified by the application. @ENG_END_DOX"]
pub const ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE_WFVR_OFF_UNLESS_APP_SPECIFIES:
    ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE = 1;
#[doc = "< @ENG_START_DOX VSync is on, unless specified by application. @ENG_END_DOX"]
pub const ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE_WFVR_ON_UNLESS_APP_SPECIFIES:
    ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE = 2;
#[doc = "< @ENG_START_DOX VSync is always on. @ENG_END_DOX"]
pub const ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE_WFVR_ALWAYS_ON: ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE =
    3;
#[doc = " @enum ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the modes of VSync settings.\n @ENG_END_DOX"]
pub type ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The anti-aliasing mode uses application settings. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_MODE_AA_MODE_USE_APP_SETTINGS: ADLX_ANTI_ALIASING_MODE = 0;
#[doc = "< @ENG_START_DOX The anti-aliasing mode enhances the application settings. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_MODE_AA_MODE_ENHANCE_APP_SETTINGS: ADLX_ANTI_ALIASING_MODE = 1;
#[doc = "< @ENG_START_DOX The anti-aliasing mode overrides the application settings. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_MODE_AA_MODE_OVERRIDE_APP_SETTINGS: ADLX_ANTI_ALIASING_MODE = 2;
#[doc = " @enum ADLX_ANTI_ALIASING_MODE\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the anti-aliasing mode.\n @ENG_END_DOX"]
pub type ADLX_ANTI_ALIASING_MODE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The anti-aliasing level is invalid. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_LEVEL_AA_LEVEL_INVALID: ADLX_ANTI_ALIASING_LEVEL = 0;
#[doc = "< @ENG_START_DOX The anti-aliasing level is 2X. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_LEVEL_AA_LEVEL_2X: ADLX_ANTI_ALIASING_LEVEL = 2;
#[doc = "< @ENG_START_DOX The anti-aliasing level is 2XEQ. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_LEVEL_AA_LEVEL_2XEQ: ADLX_ANTI_ALIASING_LEVEL = 3;
#[doc = "< @ENG_START_DOX The anti-aliasing level is 4X. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_LEVEL_AA_LEVEL_4X: ADLX_ANTI_ALIASING_LEVEL = 4;
#[doc = "< @ENG_START_DOX The anti-aliasing level is 4XEQ. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_LEVEL_AA_LEVEL_4XEQ: ADLX_ANTI_ALIASING_LEVEL = 5;
#[doc = "< @ENG_START_DOX The anti-aliasing level is 8X. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_LEVEL_AA_LEVEL_8X: ADLX_ANTI_ALIASING_LEVEL = 8;
#[doc = "< @ENG_START_DOX The anti-aliasing level is 8XEQ. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_LEVEL_AA_LEVEL_8XEQ: ADLX_ANTI_ALIASING_LEVEL = 9;
#[doc = " @enum ADLX_ANTI_ALIASING_LEVEL\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the anti-aliasing level.\n @ENG_END_DOX"]
pub type ADLX_ANTI_ALIASING_LEVEL = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The multi-sampling method. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_METHOD_AA_METHOD_MULTISAMPLING: ADLX_ANTI_ALIASING_METHOD = 0;
#[doc = "< @ENG_START_DOX The adaptive multi-sampling method. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_METHOD_AA_METHOD_ADAPTIVE_MULTISAMPLING: ADLX_ANTI_ALIASING_METHOD = 1;
#[doc = "< @ENG_START_DOX The super-sampling method. @ENG_END_DOX"]
pub const ADLX_ANTI_ALIASING_METHOD_AA_METHOD_SUPERSAMPLING: ADLX_ANTI_ALIASING_METHOD = 2;
#[doc = " @enum ADLX_ANTI_ALIASING_METHOD\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the anti-aliasing method.\n @ENG_END_DOX"]
pub type ADLX_ANTI_ALIASING_METHOD = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The Anisotropic Filtering level is invalid. @ENG_END_DOX"]
pub const ADLX_ANISOTROPIC_FILTERING_LEVEL_AF_LEVEL_INVALID: ADLX_ANISOTROPIC_FILTERING_LEVEL = 0;
#[doc = "< @ENG_START_DOX The Anisotropic Filtering level is 2X. @ENG_END_DOX"]
pub const ADLX_ANISOTROPIC_FILTERING_LEVEL_AF_LEVEL_X2: ADLX_ANISOTROPIC_FILTERING_LEVEL = 2;
#[doc = "< @ENG_START_DOX The Anisotropic Filtering level is 4X. @ENG_END_DOX"]
pub const ADLX_ANISOTROPIC_FILTERING_LEVEL_AF_LEVEL_X4: ADLX_ANISOTROPIC_FILTERING_LEVEL = 4;
#[doc = "< @ENG_START_DOX The Anisotropic Filtering level is 8X. @ENG_END_DOX"]
pub const ADLX_ANISOTROPIC_FILTERING_LEVEL_AF_LEVEL_X8: ADLX_ANISOTROPIC_FILTERING_LEVEL = 8;
#[doc = "< @ENG_START_DOX The Anisotropic Filtering level is 16X. @ENG_END_DOX"]
pub const ADLX_ANISOTROPIC_FILTERING_LEVEL_AF_LEVEL_X16: ADLX_ANISOTROPIC_FILTERING_LEVEL = 16;
#[doc = " @enum ADLX_ANISOTROPIC_FILTERING_LEVEL\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the Anisotropic Filtering level.\n @ENG_END_DOX"]
pub type ADLX_ANISOTROPIC_FILTERING_LEVEL = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX This mode uses AMD optimization. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_MODE_T_MODE_AMD_OPTIMIZED: ADLX_TESSELLATION_MODE = 0;
#[doc = "< @ENG_START_DOX This mode uses application settings. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_MODE_T_MODE_USE_APP_SETTINGS: ADLX_TESSELLATION_MODE = 1;
#[doc = "< @ENG_START_DOX This mode uses override application settings. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_MODE_T_MODE_OVERRIDE_APP_SETTINGS: ADLX_TESSELLATION_MODE = 2;
#[doc = " @enum ADLX_TESSELLATION_MODE\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the tessellation setting on a GPU.\n @ENG_END_DOX"]
pub type ADLX_TESSELLATION_MODE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The tessellation level is Off. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_LEVEL_T_LEVEL_OFF: ADLX_TESSELLATION_LEVEL = 1;
#[doc = "< @ENG_START_DOX The tessellation level is 2X. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_LEVEL_T_LEVEL_2X: ADLX_TESSELLATION_LEVEL = 2;
#[doc = "< @ENG_START_DOX The tessellation level is 4X. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_LEVEL_T_LEVEL_4X: ADLX_TESSELLATION_LEVEL = 4;
#[doc = "< @ENG_START_DOX The tessellation level is 6X. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_LEVEL_T_LEVEL_6X: ADLX_TESSELLATION_LEVEL = 6;
#[doc = "< @ENG_START_DOX The tessellation level is 8X. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_LEVEL_T_LEVEL_8X: ADLX_TESSELLATION_LEVEL = 8;
#[doc = "< @ENG_START_DOX The tessellation level is 16X. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_LEVEL_T_LEVEL_16X: ADLX_TESSELLATION_LEVEL = 16;
#[doc = "< @ENG_START_DOX The tessellation level is 32X. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_LEVEL_T_LEVEL_32X: ADLX_TESSELLATION_LEVEL = 32;
#[doc = "< @ENG_START_DOX The tessellation level is 64X. @ENG_END_DOX"]
pub const ADLX_TESSELLATION_LEVEL_T_LEVEL_64X: ADLX_TESSELLATION_LEVEL = 64;
#[doc = " @enum ADLX_TESSELLATION_LEVEL\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the tessellation level on a GPU.\n @ENG_END_DOX"]
pub type ADLX_TESSELLATION_LEVEL = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The memory timing is default. @ENG_END_DOX"]
pub const ADLX_MEMORYTIMING_DESCRIPTION_MEMORYTIMING_DEFAULT: ADLX_MEMORYTIMING_DESCRIPTION = 0;
#[doc = "< @ENG_START_DOX The memory timing is fast timing. @ENG_END_DOX"]
pub const ADLX_MEMORYTIMING_DESCRIPTION_MEMORYTIMING_FAST_TIMING: ADLX_MEMORYTIMING_DESCRIPTION = 1;
#[doc = "< @ENG_START_DOX The memory timing is fast timing level 2. @ENG_END_DOX"]
pub const ADLX_MEMORYTIMING_DESCRIPTION_MEMORYTIMING_FAST_TIMING_LEVEL_2:
    ADLX_MEMORYTIMING_DESCRIPTION = 2;
#[doc = "< @ENG_START_DOX The memory timing is automatic. @ENG_END_DOX"]
pub const ADLX_MEMORYTIMING_DESCRIPTION_MEMORYTIMING_AUTOMATIC: ADLX_MEMORYTIMING_DESCRIPTION = 3;
#[doc = "< @ENG_START_DOX The memory timing is level 1. @ENG_END_DOX"]
pub const ADLX_MEMORYTIMING_DESCRIPTION_MEMORYTIMING_MEMORYTIMING_LEVEL_1:
    ADLX_MEMORYTIMING_DESCRIPTION = 4;
#[doc = "< @ENG_START_DOX The memory timing is level 2. @ENG_END_DOX"]
pub const ADLX_MEMORYTIMING_DESCRIPTION_MEMORYTIMING_MEMORYTIMING_LEVEL_2:
    ADLX_MEMORYTIMING_DESCRIPTION = 5;
#[doc = "  @enum ADLX_MEMORYTIMING_DESCRIPTION\n  @ingroup enumerations\n  @ENG_START_DOX\n  @brief Indicates the priority of the log entry.\n  @ENG_END_DOX"]
pub type ADLX_MEMORYTIMING_DESCRIPTION = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The I2C line is OEM. @ENG_END_DOX"]
pub const ADLX_I2C_LINE_I2C_LINE_OEM: ADLX_I2C_LINE = 1;
#[doc = "< @ENG_START_DOX The I2C line is Over Driver Control. @ENG_END_DOX"]
pub const ADLX_I2C_LINE_I2C_LINE_OD_CONTROL: ADLX_I2C_LINE = 2;
#[doc = "< @ENG_START_DOX The I2C line is OEM2. @ENG_END_DOX"]
pub const ADLX_I2C_LINE_I2C_LINE_OEM2: ADLX_I2C_LINE = 3;
#[doc = "< @ENG_START_DOX The I2C line is OEM3. @ENG_END_DOX"]
pub const ADLX_I2C_LINE_I2C_LINE_OEM3: ADLX_I2C_LINE = 4;
#[doc = "< @ENG_START_DOX The I2C line is OEM4. @ENG_END_DOX"]
pub const ADLX_I2C_LINE_I2C_LINE_OEM4: ADLX_I2C_LINE = 5;
#[doc = "< @ENG_START_DOX The I2C line is OEM5. @ENG_END_DOX"]
pub const ADLX_I2C_LINE_I2C_LINE_OEM5: ADLX_I2C_LINE = 6;
#[doc = "< @ENG_START_DOX The I2C line is OEM6. @ENG_END_DOX"]
pub const ADLX_I2C_LINE_I2C_LINE_OEM6: ADLX_I2C_LINE = 7;
#[doc = " @enum ADLX_I2C_LINE\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the I2C line options.\n @ENG_END_DOX"]
pub type ADLX_I2C_LINE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The event has an unknown trigger. @ENG_END_DOX"]
pub const ADLX_SYNC_ORIGIN_SYNC_ORIGIN_UNKNOWN: ADLX_SYNC_ORIGIN = 1;
#[doc = "< @ENG_START_DOX The event is triggered by a change in settings using ADLX in this application. @ENG_END_DOX"]
pub const ADLX_SYNC_ORIGIN_SYNC_ORIGIN_INTERNAL: ADLX_SYNC_ORIGIN = 2;
#[doc = "< @ENG_START_DOX The event is triggered by a change in settings using ADLX in another application. @ENG_END_DOX"]
pub const ADLX_SYNC_ORIGIN_SYNC_ORIGIN_EXTERNAL: ADLX_SYNC_ORIGIN = 3;
#[doc = " @enum ADLX_SYNC_ORIGIN\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the origin of an event.\n @ENG_END_DOX"]
pub type ADLX_SYNC_ORIGIN = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The transfer function is sRGB. @ENG_END_DOX"]
pub const ADLX_3DLUT_TRANSFER_FUNCTION_TF_SRGB: ADLX_3DLUT_TRANSFER_FUNCTION = 1;
#[doc = "< @ENG_START_DOX The transfer function is PQ. @ENG_END_DOX"]
pub const ADLX_3DLUT_TRANSFER_FUNCTION_TF_PQ: ADLX_3DLUT_TRANSFER_FUNCTION = 2;
#[doc = "< @ENG_START_DOX The transfer function is G22. @ENG_END_DOX"]
pub const ADLX_3DLUT_TRANSFER_FUNCTION_TF_G22: ADLX_3DLUT_TRANSFER_FUNCTION = 3;
#[doc = " @enum ADLX_3DLUT_TRANSFER_FUNCTION\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the User 3D LUT transfer function.\n @ENG_END_DOX"]
pub type ADLX_3DLUT_TRANSFER_FUNCTION = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The color space is sRGB. @ENG_END_DOX"]
pub const ADLX_3DLUT_COLORSPACE_CS_SRGB: ADLX_3DLUT_COLORSPACE = 1;
#[doc = "< @ENG_START_DOX The color space is BT2020. @ENG_END_DOX"]
pub const ADLX_3DLUT_COLORSPACE_CS_BT2020: ADLX_3DLUT_COLORSPACE = 2;
#[doc = "< @ENG_START_DOX The color space is DCIP3. @ENG_END_DOX"]
pub const ADLX_3DLUT_COLORSPACE_CS_DCIP3: ADLX_3DLUT_COLORSPACE = 3;
#[doc = "< @ENG_START_DOX The color space is native. @ENG_END_DOX"]
pub const ADLX_3DLUT_COLORSPACE_CS_NATIVE: ADLX_3DLUT_COLORSPACE = 4;
#[doc = " @enum ADLX_3DLUT_COLORSPACE\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief Indicates the custom 3D LUT color space.\n @ENG_END_DOX"]
pub type ADLX_3DLUT_COLORSPACE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The bias control type is auto. @ENG_END_DOX"]
pub const ADLX_SSM_BIAS_MODE_SSM_BIAS_AUTO: ADLX_SSM_BIAS_MODE = 0;
#[doc = "< @ENG_START_DOX The bias control type is manual. @ENG_END_DOX"]
pub const ADLX_SSM_BIAS_MODE_SSM_BIAS_MANUAL: ADLX_SSM_BIAS_MODE = 1;
#[doc = " @enum ADLX_SSM_BIAS_MODE\n  @ingroup enumerations\n @ENG_START_DOX\n  @brief AMD SmartShift Max bias mode.\n @ENG_END_DOX"]
pub type ADLX_SSM_BIAS_MODE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The Antilag level is AntiLag. @ENG_END_DOX"]
pub const ADLX_ANTILAG_STATE_ANTILAG: ADLX_ANTILAG_STATE = 0;
#[doc = "< @ENG_START_DOX The Antilag level is AntiLag Next. @ENG_END_DOX"]
pub const ADLX_ANTILAG_STATE_ANTILAGNEXT: ADLX_ANTILAG_STATE = 1;
#[doc = " @enum ADLX_ANTILAG_STATE\n @ingroup enumerations\n @ENG_START_DOX\n @brief Indicates the state of Anti Lag.\n @ENG_END_DOX"]
pub type ADLX_ANTILAG_STATE = ::std::os::raw::c_int;
#[doc = "< @ENG_START_DOX The GPU is not part of an AMD MGPU configuration. @ENG_END_DOX"]
pub const ADLX_MGPU_MODE_MGPU_NONE: ADLX_MGPU_MODE = 0;
#[doc = "< @ENG_START_DOX The GPU is the primary GPU in an AMD MGPU configuration. @ENG_END_DOX"]
pub const ADLX_MGPU_MODE_MGPU_PRIMARY: ADLX_MGPU_MODE = 1;
#[doc = "< @ENG_START_DOX The GPU is the secondary GPU in an AMD MGPU configuration. @ENG_END_DOX"]
pub const ADLX_MGPU_MODE_MGPU_SECONDARY: ADLX_MGPU_MODE = 2;
#[doc = " @enum ADLX_MGPU_MODE\n @ingroup enumerations\n @ENG_START_DOX\n @brief Indicates the AMD MGPU mode.\n @ENG_END_DOX"]
pub type ADLX_MGPU_MODE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXInterfaceVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXInterface) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXInterface) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXInterface,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXInterfaceVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXInterfaceVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXInterfaceVtbl>(),
        24usize,
        concat!("Size of: ", stringify!(IADLXInterfaceVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXInterfaceVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXInterfaceVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXInterfaceVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXInterfaceVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXInterfaceVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXInterface {
    pub pVtbl: *const IADLXInterfaceVtbl,
}
#[test]
fn bindgen_test_layout_IADLXInterface() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXInterface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXInterface>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXInterface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXInterface),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXListVtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXList) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXList) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXList,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Size: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXList) -> adlx_uint>,
    pub Empty: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXList) -> adlx_bool>,
    pub Begin: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXList) -> adlx_uint>,
    pub End: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXList) -> adlx_uint>,
    pub At: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub Clear: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXList) -> ADLX_RESULT>,
    pub Remove_Back:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXList) -> ADLX_RESULT>,
    pub Add_Back: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXList, pItem: *mut IADLXInterface) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXListVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXListVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXListVtbl>(),
        88usize,
        concat!("Size of: ", stringify!(IADLXListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXListVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(Empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(Begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(End)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(At)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clear) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(Clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove_Back) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(Remove_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXListVtbl),
            "::",
            stringify!(Add_Back)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXList {
    pub pVtbl: *const IADLXListVtbl,
}
#[test]
fn bindgen_test_layout_IADLXList() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXList>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXList))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXList>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXList),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUVtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPU) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPU) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub VendorId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            vendorId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub ASICFamilyType: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            asicFamilyType: *mut ADLX_ASIC_FAMILY_TYPE,
        ) -> ADLX_RESULT,
    >,
    pub Type: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU, gpuType: *mut ADLX_GPU_TYPE) -> ADLX_RESULT,
    >,
    pub IsExternal: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU, isExternal: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub Name: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            gpuName: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub DriverPath: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            driverPath: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub PNPString: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            pnpString: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub HasDesktops: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU, hasDesktops: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub TotalVRAM: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU, vramMB: *mut adlx_uint) -> ADLX_RESULT,
    >,
    pub VRAMType: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            type_: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub BIOSInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            partNumber: *mut *const ::std::os::raw::c_char,
            version: *mut *const ::std::os::raw::c_char,
            date: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub DeviceId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            deviceId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub RevisionId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            revisionId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub SubSystemId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            subSystemId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub SubSystemVendorId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU,
            subSystemVendorId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub UniqueId: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU, uniqueId: *mut adlx_int) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPUVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUVtbl>(),
        152usize,
        concat!("Size of: ", stringify!(IADLXGPUVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(VendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASICFamilyType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(ASICFamilyType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsExternal) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(IsExternal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DriverPath) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(DriverPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PNPString) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(PNPString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasDesktops) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(HasDesktops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalVRAM) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(TotalVRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VRAMType) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(VRAMType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BIOSInfo) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(BIOSInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceId) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(DeviceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevisionId) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(RevisionId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubSystemId) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(SubSystemId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubSystemVendorId) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(SubSystemVendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UniqueId) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUVtbl),
            "::",
            stringify!(UniqueId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPU {
    pub pVtbl: *const IADLXGPUVtbl,
}
#[test]
fn bindgen_test_layout_IADLXGPU() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPU> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPU>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPU))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPU>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPU))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUListVtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUList) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUList) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUList,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Size: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUList) -> adlx_uint>,
    pub Empty: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUList) -> adlx_uint8>,
    pub Begin: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUList) -> adlx_uint>,
    pub End: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUList) -> adlx_uint>,
    pub At: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub Clear: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUList) -> ADLX_RESULT>,
    pub Remove_Back:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUList) -> ADLX_RESULT>,
    pub Add_Back: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUList, pItem: *mut IADLXInterface) -> ADLX_RESULT,
    >,
    pub At_GPUList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXGPU,
        ) -> ADLX_RESULT,
    >,
    pub Add_Back_GPUList: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUList, pItem: *mut IADLXGPU) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPUListVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUListVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUListVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLXGPUListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUListVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(End)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(At)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clear) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove_Back) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Remove_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Add_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At_GPUList) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(At_GPUList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back_GPUList) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUListVtbl),
            "::",
            stringify!(Add_Back_GPUList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUList {
    pub pVtbl: *const IADLXGPUListVtbl,
}
#[test]
fn bindgen_test_layout_IADLXGPUList() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUList>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPUList))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUList>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUList),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUsEventListenerVtbl {
    pub OnGPUListChanged: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUsEventListener,
            pNewGPUs: *mut IADLXGPUList,
        ) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPUsEventListenerVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUsEventListenerVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUsEventListenerVtbl>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPUsEventListenerVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUsEventListenerVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUsEventListenerVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnGPUListChanged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUsEventListenerVtbl),
            "::",
            stringify!(OnGPUListChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUsEventListener {
    pub pVtbl: *const IADLXGPUsEventListenerVtbl,
}
#[test]
fn bindgen_test_layout_IADLXGPUsEventListener() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUsEventListener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUsEventListener>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPUsEventListener))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUsEventListener>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUsEventListener))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUsEventListener),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUsChangedHandlingVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUsChangedHandling) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUsChangedHandling) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUsChangedHandling,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub AddGPUsListEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUsChangedHandling,
            pListener: *mut IADLXGPUsEventListener,
        ) -> ADLX_RESULT,
    >,
    pub RemoveGPUsListEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUsChangedHandling,
            pListener: *mut IADLXGPUsEventListener,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPUsChangedHandlingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUsChangedHandlingVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUsChangedHandlingVtbl>(),
        40usize,
        concat!("Size of: ", stringify!(IADLXGPUsChangedHandlingVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUsChangedHandlingVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUsChangedHandlingVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUsChangedHandlingVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUsChangedHandlingVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUsChangedHandlingVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddGPUsListEventListener) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUsChangedHandlingVtbl),
            "::",
            stringify!(AddGPUsListEventListener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RemoveGPUsListEventListener) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUsChangedHandlingVtbl),
            "::",
            stringify!(RemoveGPUsListEventListener)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUsChangedHandling {
    pub pVtbl: *const IADLXGPUsChangedHandlingVtbl,
}
#[test]
fn bindgen_test_layout_IADLXGPUsChangedHandling() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUsChangedHandling> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUsChangedHandling>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPUsChangedHandling))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUsChangedHandling>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUsChangedHandling))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUsChangedHandling),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDesktopServices {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXLog {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUTuningServices {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXI2C {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemVtbl {
    pub GetHybridGraphicsType: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystem, hgType: *mut ADLX_HG_TYPE) -> ADLX_RESULT,
    >,
    pub GetGPUs: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            ppGPUs: *mut *mut IADLXGPUList,
        ) -> ADLX_RESULT,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetDisplaysServices: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            ppDispServices: *mut *mut IADLXDisplayServices,
        ) -> ADLX_RESULT,
    >,
    pub GetDesktopsServices: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            ppDeskServices: *mut *mut IADLXDesktopServices,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUsChangedHandling: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            ppGPUsChangedHandling: *mut *mut IADLXGPUsChangedHandling,
        ) -> ADLX_RESULT,
    >,
    pub EnableLog: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            mode: ADLX_LOG_DESTINATION,
            severity: ADLX_LOG_SEVERITY,
            pLogger: *mut IADLXLog,
            fileName: *const wchar_t,
        ) -> ADLX_RESULT,
    >,
    pub Get3DSettingsServices: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            pp3DSettingsServices: *mut *mut IADLX3DSettingsServices,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUTuningServices: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            ppGPUTuningServices: *mut *mut IADLXGPUTuningServices,
        ) -> ADLX_RESULT,
    >,
    pub GetPerformanceMonitoringServices: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            ppPerformanceMonitoringServices: *mut *mut IADLXPerformanceMonitoringServices,
        ) -> ADLX_RESULT,
    >,
    pub TotalSystemRAM: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystem, ramMB: *mut adlx_uint) -> ADLX_RESULT,
    >,
    pub GetI2C: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem,
            pGPU: *mut IADLXGPU,
            ppI2C: *mut *mut IADLXI2C,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXSystemVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemVtbl>(),
        96usize,
        concat!("Size of: ", stringify!(IADLXSystemVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetHybridGraphicsType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(GetHybridGraphicsType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(GetGPUs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDisplaysServices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(GetDisplaysServices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDesktopsServices) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(GetDesktopsServices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUsChangedHandling) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(GetGPUsChangedHandling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EnableLog) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(EnableLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Get3DSettingsServices) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(Get3DSettingsServices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUTuningServices) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(GetGPUTuningServices)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetPerformanceMonitoringServices) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(GetPerformanceMonitoringServices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalSystemRAM) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(TotalSystemRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetI2C) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemVtbl),
            "::",
            stringify!(GetI2C)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystem {
    pub pVtbl: *const IADLXSystemVtbl,
}
#[test]
fn bindgen_test_layout_IADLXSystem() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystem>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXSystem))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystem>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystem),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDesktop {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLMappingVtbl {
    pub GetADLXGPUFromBdf: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLMapping,
            bus: adlx_int,
            device: adlx_int,
            function: adlx_int,
            ppGPU: *mut *mut IADLXGPU,
        ) -> ADLX_RESULT,
    >,
    pub GetADLXGPUFromAdlAdapterIndex: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLMapping,
            adlAdapterIndex: adlx_int,
            ppGPU: *mut *mut IADLXGPU,
        ) -> ADLX_RESULT,
    >,
    pub BdfFromADLXGPU: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLMapping,
            pGPU: *mut IADLXGPU,
            bus: *mut adlx_int,
            device: *mut adlx_int,
            function: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub AdlAdapterIndexFromADLXGPU: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLMapping,
            pGPU: *mut IADLXGPU,
            adlAdapterIndex: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetADLXDisplayFromADLIds: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLMapping,
            adapterIndex: adlx_int,
            displayIndex: adlx_int,
            bus: adlx_int,
            device: adlx_int,
            function: adlx_int,
            ppDisplay: *mut *mut IADLXDisplay,
        ) -> ADLX_RESULT,
    >,
    pub ADLIdsFromADLXDisplay: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLMapping,
            pDisplay: *mut IADLXDisplay,
            adapterIndex: *mut adlx_int,
            displayIndex: *mut adlx_int,
            bus: *mut adlx_int,
            device: *mut adlx_int,
            function: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetADLXDesktopFromADLIds: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLMapping,
            adapterIndex: adlx_int,
            VidPnSourceId: adlx_int,
            bus: adlx_int,
            device: adlx_int,
            function: adlx_int,
            ppDesktop: *mut *mut IADLXDesktop,
        ) -> ADLX_RESULT,
    >,
    pub ADLIdsFromADLXDesktop: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLMapping,
            pDesktop: *mut IADLXDesktop,
            adapterIndex: *mut adlx_int,
            VidPnSourceId: *mut adlx_int,
            bus: *mut adlx_int,
            device: *mut adlx_int,
            function: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLMappingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLMappingVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLMappingVtbl>(),
        64usize,
        concat!("Size of: ", stringify!(IADLMappingVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLMappingVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLMappingVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetADLXGPUFromBdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMappingVtbl),
            "::",
            stringify!(GetADLXGPUFromBdf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetADLXGPUFromAdlAdapterIndex) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMappingVtbl),
            "::",
            stringify!(GetADLXGPUFromAdlAdapterIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BdfFromADLXGPU) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMappingVtbl),
            "::",
            stringify!(BdfFromADLXGPU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AdlAdapterIndexFromADLXGPU) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMappingVtbl),
            "::",
            stringify!(AdlAdapterIndexFromADLXGPU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetADLXDisplayFromADLIds) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMappingVtbl),
            "::",
            stringify!(GetADLXDisplayFromADLIds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADLIdsFromADLXDisplay) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMappingVtbl),
            "::",
            stringify!(ADLIdsFromADLXDisplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetADLXDesktopFromADLIds) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMappingVtbl),
            "::",
            stringify!(GetADLXDesktopFromADLIds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADLIdsFromADLXDesktop) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMappingVtbl),
            "::",
            stringify!(ADLIdsFromADLXDesktop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLMapping {
    pub pVtbl: *const IADLMappingVtbl,
}
#[test]
fn bindgen_test_layout_IADLMapping() {
    const UNINIT: ::std::mem::MaybeUninit<IADLMapping> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLMapping>(),
        8usize,
        concat!("Size of: ", stringify!(IADLMapping))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLMapping>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLMapping))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLMapping),
            "::",
            stringify!(pVtbl)
        )
    );
}
pub type ADLXQueryFullVersion_Fn =
    ::std::option::Option<unsafe extern "C" fn(fullVersion: *mut adlx_uint64) -> ADLX_RESULT>;
pub type ADLXQueryVersion_Fn = ::std::option::Option<
    unsafe extern "C" fn(version: *mut *const ::std::os::raw::c_char) -> ADLX_RESULT,
>;
#[doc = " @typedef ADLX_ADL_Main_Memory_Free\n @ingroup ADLXDefs\n @ENG_START_DOX The typedef of ADLX_ADL_Main_Memory_Free function. @ENG_END_DOX\n @definition\n  @codeStart\n   typedef void (ADLX_STD_CALL* ADLX_ADL_Main_Memory_Free)(void** buffer)\n  @codeEnd"]
pub type ADLX_ADL_Main_Memory_Free =
    ::std::option::Option<unsafe extern "C" fn(buffer: *mut *mut ::std::os::raw::c_void)>;
pub type ADLXInitialize_Fn = ::std::option::Option<
    unsafe extern "C" fn(version: adlx_uint64, ppSystem: *mut *mut IADLXSystem) -> ADLX_RESULT,
>;
pub type ADLXInitializeWithCallerAdl_Fn = ::std::option::Option<
    unsafe extern "C" fn(
        version: adlx_uint64,
        ppSystem: *mut *mut IADLXSystem,
        ppAdlMapping: *mut *mut IADLMapping,
        adlContext: adlx_handle,
        adlMainMemoryFree: ADLX_ADL_Main_Memory_Free,
    ) -> ADLX_RESULT,
>;
pub type ADLXTerminate_Fn = ::std::option::Option<unsafe extern "C" fn() -> ADLX_RESULT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPU1Vtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPU1) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPU1) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub VendorId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            vendorId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub ASICFamilyType: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            asicFamilyType: *mut ADLX_ASIC_FAMILY_TYPE,
        ) -> ADLX_RESULT,
    >,
    pub Type: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU1, gpuType: *mut ADLX_GPU_TYPE) -> ADLX_RESULT,
    >,
    pub IsExternal: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU1, isExternal: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub Name: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            gpuName: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub DriverPath: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            driverPath: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub PNPString: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            pnpString: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub HasDesktops: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU1, hasDesktops: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub TotalVRAM: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU1, vramMB: *mut adlx_uint) -> ADLX_RESULT,
    >,
    pub VRAMType: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            type_: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub BIOSInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            partNumber: *mut *const ::std::os::raw::c_char,
            version: *mut *const ::std::os::raw::c_char,
            date: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub DeviceId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            deviceId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub RevisionId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            revisionId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub SubSystemId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            subSystemId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub SubSystemVendorId: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            subSystemVendorId: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub UniqueId: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU1, uniqueId: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub PCIBusType: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU1, busType: *mut ADLX_PCI_BUS_TYPE) -> ADLX_RESULT,
    >,
    pub PCIBusLaneWidth: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU1, laneWidth: *mut adlx_uint) -> ADLX_RESULT,
    >,
    pub MultiGPUMode: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPU1, mode: *mut ADLX_MGPU_MODE) -> ADLX_RESULT,
    >,
    pub ProductName: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPU1,
            productName: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPU1Vtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPU1Vtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPU1Vtbl>(),
        184usize,
        concat!("Size of: ", stringify!(IADLXGPU1Vtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPU1Vtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPU1Vtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(VendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASICFamilyType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(ASICFamilyType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsExternal) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(IsExternal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DriverPath) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(DriverPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PNPString) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(PNPString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasDesktops) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(HasDesktops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalVRAM) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(TotalVRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VRAMType) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(VRAMType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BIOSInfo) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(BIOSInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceId) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(DeviceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevisionId) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(RevisionId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubSystemId) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(SubSystemId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubSystemVendorId) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(SubSystemVendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UniqueId) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(UniqueId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PCIBusType) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(PCIBusType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PCIBusLaneWidth) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(PCIBusLaneWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MultiGPUMode) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(MultiGPUMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductName) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1Vtbl),
            "::",
            stringify!(ProductName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPU1 {
    pub pVtbl: *const IADLXGPU1Vtbl,
}
#[test]
fn bindgen_test_layout_IADLXGPU1() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPU1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPU1>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPU1))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPU1>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPU1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPU1),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXPowerTuningServices {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystem1Vtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXSystem1) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXSystem1) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem1,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetPowerTuningServices: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystem1,
            ppPowerTuningServices: *mut *mut IADLXPowerTuningServices,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXSystem1Vtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystem1Vtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystem1Vtbl>(),
        32usize,
        concat!("Size of: ", stringify!(IADLXSystem1Vtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystem1Vtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystem1Vtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystem1Vtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystem1Vtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystem1Vtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPowerTuningServices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystem1Vtbl),
            "::",
            stringify!(GetPowerTuningServices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystem1 {
    pub pVtbl: *const IADLXSystem1Vtbl,
}
#[test]
fn bindgen_test_layout_IADLXSystem1() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystem1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystem1>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXSystem1))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystem1>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystem1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystem1),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[doc = " @struct ADLX_RGB\n @ingroup structuresVal\n @ENG_START_DOX\n @brief This structure contains RGB information.\n @ENG_END_DOX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_RGB {
    #[doc = "< @ENG_START_DOX Red @ENG_END_DOX"]
    pub gamutR: adlx_double,
    #[doc = "< @ENG_START_DOX Green @ENG_END_DOX"]
    pub gamutG: adlx_double,
    #[doc = "< @ENG_START_DOX Blue @ENG_END_DOX"]
    pub gamutB: adlx_double,
}
#[test]
fn bindgen_test_layout_ADLX_RGB() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_RGB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_RGB>(),
        24usize,
        concat!("Size of: ", stringify!(ADLX_RGB))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_RGB>(),
        8usize,
        concat!("Alignment of ", stringify!(ADLX_RGB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gamutR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_RGB),
            "::",
            stringify!(gamutR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gamutG) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_RGB),
            "::",
            stringify!(gamutG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gamutB) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_RGB),
            "::",
            stringify!(gamutB)
        )
    );
}
#[doc = "  @struct ADLX_Point\n  @ingroup structuresVal\n  @ENG_START_DOX\n  @brief This structure contains information on driver point coordinates, and is used to store the driver-point coodinates for gamut, as well as white point.\n  @ENG_END_DOX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_Point {
    #[doc = "< @ENG_START_DOX The x coordinate. @ENG_END_DOX"]
    pub x: adlx_int,
    #[doc = "< @ENG_START_DOX The y coordinate. @ENG_END_DOX"]
    pub y: adlx_int,
}
#[test]
fn bindgen_test_layout_ADLX_Point() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_Point> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_Point>(),
        8usize,
        concat!("Size of: ", stringify!(ADLX_Point))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_Point>(),
        4usize,
        concat!("Alignment of ", stringify!(ADLX_Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_Point),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_Point),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "  @struct ADLX_GamutColorSpace\n  @ingroup structuresVal\n  @ENG_START_DOX\n  @brief This structure contains information on driver-supported gamut coordinates\n  @ENG_END_DOX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_GamutColorSpace {
    #[doc = "<  @ENG_START_DOX The red channel chromaticity coordinate. @ENG_END_DOX"]
    pub red: ADLX_Point,
    #[doc = "<  @ENG_START_DOX The green channel chromaticity coordinate. @ENG_END_DOX"]
    pub green: ADLX_Point,
    #[doc = "<  @ENG_START_DOX The blue channel chromaticity coordinate. @ENG_END_DOX"]
    pub blue: ADLX_Point,
}
#[test]
fn bindgen_test_layout_ADLX_GamutColorSpace() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_GamutColorSpace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_GamutColorSpace>(),
        24usize,
        concat!("Size of: ", stringify!(ADLX_GamutColorSpace))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_GamutColorSpace>(),
        4usize,
        concat!("Alignment of ", stringify!(ADLX_GamutColorSpace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).red) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_GamutColorSpace),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).green) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_GamutColorSpace),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_GamutColorSpace),
            "::",
            stringify!(blue)
        )
    );
}
#[doc = "  @struct ADLX_GammaRamp\n  @ingroup structuresVal\n  @ENG_START_DOX\n  @brief This structure contains the display gamma ramp used to program the re-gamma LUT.\n  @ENG_END_DOX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_GammaRamp {
    #[doc = "< @ENG_START_DOX The gamma ramp is a buffer containing 256 triplets of adlx_uint16 values.\nEach triplet consists of red, green and blue values. @ENG_END_DOX"]
    pub gamma: [adlx_uint16; 768usize],
}
#[test]
fn bindgen_test_layout_ADLX_GammaRamp() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_GammaRamp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_GammaRamp>(),
        1536usize,
        concat!("Size of: ", stringify!(ADLX_GammaRamp))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_GammaRamp>(),
        2usize,
        concat!("Alignment of ", stringify!(ADLX_GammaRamp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gamma) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_GammaRamp),
            "::",
            stringify!(gamma)
        )
    );
}
#[doc = "  @struct ADLX_RegammaCoeff\n  @ingroup structuresVal\n  @ENG_START_DOX\n  @brief This structure contains information on driver-supported re-gamma coefficients used to build the re-gamma curve.\n  @ENG_END_DOX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_RegammaCoeff {
    #[doc = "<  @ENG_START_DOX The a0 gamma coefficient. @ENG_END_DOX"]
    pub coefficientA0: adlx_int,
    #[doc = "<  @ENG_START_DOX The a1 gamma coefficient. @ENG_END_DOX"]
    pub coefficientA1: adlx_int,
    #[doc = "<  @ENG_START_DOX The a2 gamma coefficient. @ENG_END_DOX"]
    pub coefficientA2: adlx_int,
    #[doc = "<  @ENG_START_DOX The a3 gamma coefficient. @ENG_END_DOX"]
    pub coefficientA3: adlx_int,
    #[doc = "<  @ENG_START_DOX The regamma divider. @ENG_END_DOX"]
    pub gamma: adlx_int,
}
#[test]
fn bindgen_test_layout_ADLX_RegammaCoeff() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_RegammaCoeff> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_RegammaCoeff>(),
        20usize,
        concat!("Size of: ", stringify!(ADLX_RegammaCoeff))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_RegammaCoeff>(),
        4usize,
        concat!("Alignment of ", stringify!(ADLX_RegammaCoeff))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coefficientA0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_RegammaCoeff),
            "::",
            stringify!(coefficientA0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coefficientA1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_RegammaCoeff),
            "::",
            stringify!(coefficientA1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coefficientA2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_RegammaCoeff),
            "::",
            stringify!(coefficientA2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coefficientA3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_RegammaCoeff),
            "::",
            stringify!(coefficientA3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gamma) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_RegammaCoeff),
            "::",
            stringify!(gamma)
        )
    );
}
#[doc = "  @struct ADLX_TimingInfo\n  @ingroup structuresVal\n  @ENG_START_DOX\n  @brief This structure contains display timing information.\n  @ENG_END_DOX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_TimingInfo {
    #[doc = "< @ENG_START_DOX The detailed timing flag. @ENG_END_DOX"]
    pub timingFlags: adlx_int,
    #[doc = "< @ENG_START_DOX The total number of pixels that compose all scan lines during a horizontal sync. @ENG_END_DOX"]
    pub hTotal: adlx_int,
    #[doc = "< @ENG_START_DOX The total number of vertical pixels permitted/processed per sync. @ENG_END_DOX"]
    pub vTotal: adlx_int,
    #[doc = "< @ENG_START_DOX The number of horizontal pixels within the active area. @ENG_END_DOX"]
    pub hDisplay: adlx_int,
    #[doc = "< @ENG_START_DOX The number of vertical pixels within the active display area. @ENG_END_DOX"]
    pub vDisplay: adlx_int,
    #[doc = "< @ENG_START_DOX The number of horizontal pixels between the end of the active area and the next sync. This is the distance between the right/bottom portion of the display up to the right/bottom portion of the actual image. @ENG_END_DOX"]
    pub hFrontPorch: adlx_int,
    #[doc = "< @ENG_START_DOX The number of vertical pixels between the end of the active area and the next sync. This is the distance between the right/bottom portion of the display to the right/bottom portion of the actual image. @ENG_END_DOX"]
    pub vFrontPorch: adlx_int,
    #[doc = "< @ENG_START_DOX The number of pixels that compose a scan line during a horizontal sync. @ENG_END_DOX"]
    pub hSyncWidth: adlx_int,
    #[doc = "< @ENG_START_DOX The number of vertical pixels permitted/processed during a sync. @ENG_END_DOX"]
    pub vSyncWidth: adlx_int,
    #[doc = "< @ENG_START_DOX The horizontal polarity of sync signals, 0 POSITIVE; 1 NEGATIVE. Positive makes the active signals high while negative makes the active signals low. @ENG_END_DOX"]
    pub hPolarity: adlx_int,
    #[doc = "< @ENG_START_DOX The vertical polarity of sync signals, 0 POSITIVE; 1 NEGATIVE. Positive makes the active signals high while negative makes the active signals low. @ENG_END_DOX"]
    pub vPolarity: adlx_int,
}
#[test]
fn bindgen_test_layout_ADLX_TimingInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_TimingInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_TimingInfo>(),
        44usize,
        concat!("Size of: ", stringify!(ADLX_TimingInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_TimingInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ADLX_TimingInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timingFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(timingFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTotal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(hTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vTotal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(vTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hDisplay) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(hDisplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vDisplay) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(vDisplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hFrontPorch) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(hFrontPorch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vFrontPorch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(vFrontPorch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hSyncWidth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(hSyncWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vSyncWidth) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(vSyncWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hPolarity) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(hPolarity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vPolarity) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_TimingInfo),
            "::",
            stringify!(vPolarity)
        )
    );
}
#[doc = " @struct ADLX_CustomResolution\n  @ingroup structuresVal\n @ENG_START_DOX\n  @brief This structure contains information for custom resolution parameters on a given display.\n @ENG_END_DOX\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_CustomResolution {
    #[doc = "< @ENG_START_DOX The resolution width. @ENG_END_DOX"]
    pub resWidth: adlx_int,
    #[doc = "< @ENG_START_DOX The resolution height. @ENG_END_DOX"]
    pub resHeight: adlx_int,
    #[doc = "< @ENG_START_DOX The refresh rate. @ENG_END_DOX"]
    pub refreshRate: adlx_int,
    #[doc = "< @ENG_START_DOX The presentation method, 0 PROGRESSIVE; 1 INTERLACED. @ENG_END_DOX"]
    pub presentation: ADLX_DISPLAY_SCAN_TYPE,
    #[doc = "< @ENG_START_DOX The display timing standard. @ENG_END_DOX"]
    pub timingStandard: ADLX_TIMING_STANDARD,
    #[doc = "< @ENG_START_DOX The speed at which pixels are transmitted within on a refresh cycle. @ENG_END_DOX"]
    pub GPixelClock: adlx_long,
    #[doc = "< @ENG_START_DOX The detailed timing information. @ENG_END_DOX"]
    pub detailedTiming: ADLX_TimingInfo,
}
#[test]
fn bindgen_test_layout_ADLX_CustomResolution() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_CustomResolution> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_CustomResolution>(),
        68usize,
        concat!("Size of: ", stringify!(ADLX_CustomResolution))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_CustomResolution>(),
        4usize,
        concat!("Alignment of ", stringify!(ADLX_CustomResolution))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resWidth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_CustomResolution),
            "::",
            stringify!(resWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resHeight) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_CustomResolution),
            "::",
            stringify!(resHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refreshRate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_CustomResolution),
            "::",
            stringify!(refreshRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentation) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_CustomResolution),
            "::",
            stringify!(presentation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timingStandard) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_CustomResolution),
            "::",
            stringify!(timingStandard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPixelClock) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_CustomResolution),
            "::",
            stringify!(GPixelClock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detailedTiming) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_CustomResolution),
            "::",
            stringify!(detailedTiming)
        )
    );
}
#[doc = " @struct ADLX_IntRange\n  @ingroup structuresVal\n @ENG_START_DOX\n  @brief This structure contains information on the integer range.\n @ENG_END_DOX\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_IntRange {
    #[doc = "< @ENG_START_DOX The minimum integer value. @ENG_END_DOX"]
    pub minValue: adlx_int,
    #[doc = "< @ENG_START_DOX The maximum integer value. @ENG_END_DOX"]
    pub maxValue: adlx_int,
    #[doc = "< @ENG_START_DOX The accepted integer range step. @ENG_END_DOX"]
    pub step: adlx_int,
}
#[test]
fn bindgen_test_layout_ADLX_IntRange() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_IntRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_IntRange>(),
        12usize,
        concat!("Size of: ", stringify!(ADLX_IntRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_IntRange>(),
        4usize,
        concat!("Alignment of ", stringify!(ADLX_IntRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_IntRange),
            "::",
            stringify!(minValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxValue) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_IntRange),
            "::",
            stringify!(maxValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_IntRange),
            "::",
            stringify!(step)
        )
    );
}
#[doc = " @struct ADLX_UINT16_RGB\n  @ingroup structuresVal\n @ENG_START_DOX\n  @brief This structure contains UINT16 RGB information.\n @ENG_END_DOX\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_UINT16_RGB {
    #[doc = "< @ENG_START_DOX Red @ENG_END_DOX"]
    pub red: adlx_uint16,
    #[doc = "< @ENG_START_DOX Green @ENG_END_DOX"]
    pub green: adlx_uint16,
    #[doc = "< @ENG_START_DOX Blue @ENG_END_DOX"]
    pub blue: adlx_uint16,
}
#[test]
fn bindgen_test_layout_ADLX_UINT16_RGB() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_UINT16_RGB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_UINT16_RGB>(),
        6usize,
        concat!("Size of: ", stringify!(ADLX_UINT16_RGB))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_UINT16_RGB>(),
        2usize,
        concat!("Alignment of ", stringify!(ADLX_UINT16_RGB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).red) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_UINT16_RGB),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).green) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_UINT16_RGB),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blue) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_UINT16_RGB),
            "::",
            stringify!(blue)
        )
    );
}
#[doc = " @struct ADLX_3DLUT_Data\n  @ingroup structuresVal\n @ENG_START_DOX\n  @brief This structure contains custom 3D LUT information.\n @ENG_END_DOX\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADLX_3DLUT_Data {
    #[doc = "< @ENG_START_DOX The data is a buffer containing 17*17*17 triplets of @ref ADLX_UINT16_RGB values. Each triplet consists of red, green and blue values.\nFor 3D LUT data we use ushort 0 - 0xFFFF, data must be zero-padded to 16-bit. @ENG_END_DOX"]
    pub data: [ADLX_UINT16_RGB; 4913usize],
}
#[test]
fn bindgen_test_layout_ADLX_3DLUT_Data() {
    const UNINIT: ::std::mem::MaybeUninit<ADLX_3DLUT_Data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADLX_3DLUT_Data>(),
        29478usize,
        concat!("Size of: ", stringify!(ADLX_3DLUT_Data))
    );
    assert_eq!(
        ::std::mem::align_of::<ADLX_3DLUT_Data>(),
        2usize,
        concat!("Alignment of ", stringify!(ADLX_3DLUT_Data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADLX_3DLUT_Data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUMetricsSupportVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsSupport) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsSupport) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUUsage: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUClockSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUVRAMClockSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUTemperature: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUHotspotTemperature: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUPower: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUTotalBoardPower: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUFanSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUVRAM: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUVoltage: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUUsageRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUClockSpeedRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUVRAMClockSpeedRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUTemperatureRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUHotspotTemperatureRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUPowerRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUFanSpeedRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUVRAMRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUVoltageRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUTotalBoardPowerRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUIntakeTemperatureRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedGPUIntakeTemperature: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPUMetricsSupportVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUMetricsSupportVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUMetricsSupportVtbl>(),
        200usize,
        concat!("Size of: ", stringify!(IADLXGPUMetricsSupportVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUMetricsSupportVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUMetricsSupportVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedGPUUsage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedGPUClockSpeed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUClockSpeed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsSupportedGPUVRAMClockSpeed) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUVRAMClockSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedGPUTemperature) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUTemperature)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsSupportedGPUHotspotTemperature) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUHotspotTemperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedGPUPower) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUPower)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsSupportedGPUTotalBoardPower) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUTotalBoardPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedGPUFanSpeed) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUFanSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedGPUVRAM) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUVRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedGPUVoltage) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUVoltage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUUsageRange) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUUsageRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUClockSpeedRange) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUClockSpeedRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUVRAMClockSpeedRange) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUVRAMClockSpeedRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUTemperatureRange) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUTemperatureRange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetGPUHotspotTemperatureRange) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUHotspotTemperatureRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUPowerRange) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUPowerRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUFanSpeedRange) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUFanSpeedRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUVRAMRange) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUVRAMRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUVoltageRange) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUVoltageRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUTotalBoardPowerRange) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUTotalBoardPowerRange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetGPUIntakeTemperatureRange) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(GetGPUIntakeTemperatureRange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsSupportedGPUIntakeTemperature) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedGPUIntakeTemperature)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUMetricsSupport {
    pub pVtbl: *const IADLXGPUMetricsSupportVtbl,
}
#[test]
fn bindgen_test_layout_IADLXGPUMetricsSupport() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUMetricsSupport> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUMetricsSupport>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPUMetricsSupport))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUMetricsSupport>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUMetricsSupport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsSupport),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetricsSupportVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsSupport) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsSupport) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedCPUUsage: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedSystemRAM: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedSmartShift: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetCPUUsageRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetSystemRAMRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetSmartShiftRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetricsSupportVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetricsSupportVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetricsSupportVtbl>(),
        72usize,
        concat!("Size of: ", stringify!(IADLXSystemMetricsSupportVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetricsSupportVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetricsSupportVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedCPUUsage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedCPUUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedSystemRAM) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedSystemRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedSmartShift) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(IsSupportedSmartShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCPUUsageRange) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(GetCPUUsageRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSystemRAMRange) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(GetSystemRAMRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSmartShiftRange) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupportVtbl),
            "::",
            stringify!(GetSmartShiftRange)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetricsSupport {
    pub pVtbl: *const IADLXSystemMetricsSupportVtbl,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetricsSupport() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetricsSupport> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetricsSupport>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXSystemMetricsSupport))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetricsSupport>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetricsSupport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUMetricsVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetrics,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub TimeStamp: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, ms: *mut adlx_int64) -> ADLX_RESULT,
    >,
    pub GPUUsage: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_double) -> ADLX_RESULT,
    >,
    pub GPUClockSpeed: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub GPUVRAMClockSpeed: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub GPUTemperature: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_double) -> ADLX_RESULT,
    >,
    pub GPUHotspotTemperature: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_double) -> ADLX_RESULT,
    >,
    pub GPUPower: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_double) -> ADLX_RESULT,
    >,
    pub GPUTotalBoardPower: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_double) -> ADLX_RESULT,
    >,
    pub GPUFanSpeed: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub GPUVRAM: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub GPUVoltage: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub GPUIntakeTemperature: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXGPUMetrics, data: *mut adlx_double) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPUMetricsVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUMetricsVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUMetricsVtbl>(),
        120usize,
        concat!("Size of: ", stringify!(IADLXGPUMetricsVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUMetricsVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUMetricsVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeStamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(TimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUUsage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUClockSpeed) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUClockSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUVRAMClockSpeed) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUVRAMClockSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUTemperature) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUTemperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUHotspotTemperature) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUHotspotTemperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUPower) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUTotalBoardPower) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUTotalBoardPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUFanSpeed) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUFanSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUVRAM) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUVRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUVoltage) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUVoltage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPUIntakeTemperature) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsVtbl),
            "::",
            stringify!(GPUIntakeTemperature)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUMetrics {
    pub pVtbl: *const IADLXGPUMetricsVtbl,
}
#[test]
fn bindgen_test_layout_IADLXGPUMetrics() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUMetrics> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUMetrics>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPUMetrics))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUMetrics>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUMetrics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetrics),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUMetricsListVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsList) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsList) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsList,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Size:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsList) -> adlx_uint>,
    pub Empty:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsList) -> adlx_bool>,
    pub Begin:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsList) -> adlx_uint>,
    pub End:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsList) -> adlx_uint>,
    pub At: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub Clear:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsList) -> ADLX_RESULT>,
    pub Remove_Back:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXGPUMetricsList) -> ADLX_RESULT>,
    pub Add_Back: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsList,
            pItem: *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub At_GPUMetricsList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXGPUMetrics,
        ) -> ADLX_RESULT,
    >,
    pub Add_Back_GPUMetricsList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXGPUMetricsList,
            pItem: *mut IADLXGPUMetrics,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPUMetricsListVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUMetricsListVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUMetricsListVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLXGPUMetricsListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUMetricsListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUMetricsListVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(End)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(At)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clear) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove_Back) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Remove_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Add_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At_GPUMetricsList) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(At_GPUMetricsList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back_GPUMetricsList) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsListVtbl),
            "::",
            stringify!(Add_Back_GPUMetricsList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUMetricsList {
    pub pVtbl: *const IADLXGPUMetricsListVtbl,
}
#[test]
fn bindgen_test_layout_IADLXGPUMetricsList() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUMetricsList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUMetricsList>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXGPUMetricsList))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUMetricsList>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUMetricsList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUMetricsList),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetricsVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetrics,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub TimeStamp: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics, ms: *mut adlx_int64) -> ADLX_RESULT,
    >,
    pub CPUUsage: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics, data: *mut adlx_double) -> ADLX_RESULT,
    >,
    pub SystemRAM: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics, data: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub SmartShift: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics, data: *mut adlx_int) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetricsVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetricsVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetricsVtbl>(),
        56usize,
        concat!("Size of: ", stringify!(IADLXSystemMetricsVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetricsVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetricsVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeStamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsVtbl),
            "::",
            stringify!(TimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CPUUsage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsVtbl),
            "::",
            stringify!(CPUUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SystemRAM) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsVtbl),
            "::",
            stringify!(SystemRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SmartShift) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsVtbl),
            "::",
            stringify!(SmartShift)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetrics {
    pub pVtbl: *const IADLXSystemMetricsVtbl,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetrics() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetrics> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetrics>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXSystemMetrics))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetrics>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetrics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetricsListVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsList) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsList) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsList,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Size: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsList) -> adlx_uint,
    >,
    pub Empty: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsList) -> adlx_bool,
    >,
    pub Begin: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsList) -> adlx_uint,
    >,
    pub End: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsList) -> adlx_uint,
    >,
    pub At: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub Clear: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsList) -> ADLX_RESULT,
    >,
    pub Remove_Back: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsList) -> ADLX_RESULT,
    >,
    pub Add_Back: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsList,
            pItem: *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub At_SystemMetricsList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXSystemMetrics,
        ) -> ADLX_RESULT,
    >,
    pub Add_Back_SystemMetricsList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsList,
            pItem: *mut IADLXSystemMetrics,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetricsListVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetricsListVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetricsListVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLXSystemMetricsListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetricsListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetricsListVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(End)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(At)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clear) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove_Back) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Remove_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Add_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At_SystemMetricsList) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(At_SystemMetricsList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back_SystemMetricsList) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsListVtbl),
            "::",
            stringify!(Add_Back_SystemMetricsList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetricsList {
    pub pVtbl: *const IADLXSystemMetricsListVtbl,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetricsList() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetricsList> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetricsList>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXSystemMetricsList))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetricsList>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetricsList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsList),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXFPSVtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPS) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPS) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXFPS,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub TimeStamp: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXFPS, ms: *mut adlx_int64) -> ADLX_RESULT,
    >,
    pub FPS: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXFPS, data: *mut adlx_int) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXFPSVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXFPSVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXFPSVtbl>(),
        40usize,
        concat!("Size of: ", stringify!(IADLXFPSVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXFPSVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXFPSVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeStamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSVtbl),
            "::",
            stringify!(TimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPS) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSVtbl),
            "::",
            stringify!(FPS)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXFPS {
    pub pVtbl: *const IADLXFPSVtbl,
}
#[test]
fn bindgen_test_layout_IADLXFPS() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXFPS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXFPS>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXFPS))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXFPS>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXFPS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPS),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXFPSListVtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPSList) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPSList) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXFPSList,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Size: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPSList) -> adlx_uint>,
    pub Empty: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPSList) -> adlx_bool>,
    pub Begin: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPSList) -> adlx_uint>,
    pub End: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPSList) -> adlx_uint>,
    pub At: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXFPSList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub Clear: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPSList) -> ADLX_RESULT>,
    pub Remove_Back:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXFPSList) -> ADLX_RESULT>,
    pub Add_Back: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXFPSList, pItem: *mut IADLXInterface) -> ADLX_RESULT,
    >,
    pub At_FPSList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXFPSList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXFPS,
        ) -> ADLX_RESULT,
    >,
    pub Add_Back_FPSList: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXFPSList, pItem: *mut IADLXFPS) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXFPSListVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXFPSListVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXFPSListVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLXFPSListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXFPSListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXFPSListVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(End)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(At)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clear) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove_Back) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Remove_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Add_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At_FPSList) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(At_FPSList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back_FPSList) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSListVtbl),
            "::",
            stringify!(Add_Back_FPSList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXFPSList {
    pub pVtbl: *const IADLXFPSListVtbl,
}
#[test]
fn bindgen_test_layout_IADLXFPSList() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXFPSList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXFPSList>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXFPSList))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXFPSList>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXFPSList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFPSList),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXAllMetricsVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetrics) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetrics) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetrics,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub TimeStamp: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXAllMetrics, ms: *mut adlx_int64) -> ADLX_RESULT,
    >,
    pub GetSystemMetrics: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetrics,
            metrics: *mut *mut IADLXSystemMetrics,
        ) -> ADLX_RESULT,
    >,
    pub GetFPS: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetrics,
            metrics: *mut *mut IADLXFPS,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUMetrics: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetrics,
            pGPU: *mut IADLXGPU,
            metrics: *mut *mut IADLXGPUMetrics,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXAllMetricsVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXAllMetricsVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXAllMetricsVtbl>(),
        56usize,
        concat!("Size of: ", stringify!(IADLXAllMetricsVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXAllMetricsVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXAllMetricsVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeStamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsVtbl),
            "::",
            stringify!(TimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSystemMetrics) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsVtbl),
            "::",
            stringify!(GetSystemMetrics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFPS) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsVtbl),
            "::",
            stringify!(GetFPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUMetrics) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsVtbl),
            "::",
            stringify!(GetGPUMetrics)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXAllMetrics {
    pub pVtbl: *const IADLXAllMetricsVtbl,
}
#[test]
fn bindgen_test_layout_IADLXAllMetrics() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXAllMetrics> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXAllMetrics>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXAllMetrics))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXAllMetrics>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXAllMetrics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetrics),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXAllMetricsListVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetricsList) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetricsList) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetricsList,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Size:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetricsList) -> adlx_uint>,
    pub Empty:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetricsList) -> adlx_bool>,
    pub Begin:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetricsList) -> adlx_uint>,
    pub End:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetricsList) -> adlx_uint>,
    pub At: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetricsList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub Clear:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetricsList) -> ADLX_RESULT>,
    pub Remove_Back:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXAllMetricsList) -> ADLX_RESULT>,
    pub Add_Back: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetricsList,
            pItem: *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub At_AllMetricsList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetricsList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXAllMetrics,
        ) -> ADLX_RESULT,
    >,
    pub Add_Back_AllMetricsList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXAllMetricsList,
            pItem: *mut IADLXAllMetrics,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXAllMetricsListVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXAllMetricsListVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXAllMetricsListVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLXAllMetricsListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXAllMetricsListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXAllMetricsListVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(End)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(At)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clear) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove_Back) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Remove_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Add_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At_AllMetricsList) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(At_AllMetricsList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back_AllMetricsList) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsListVtbl),
            "::",
            stringify!(Add_Back_AllMetricsList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXAllMetricsList {
    pub pVtbl: *const IADLXAllMetricsListVtbl,
}
#[test]
fn bindgen_test_layout_IADLXAllMetricsList() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXAllMetricsList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXAllMetricsList>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXAllMetricsList))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXAllMetricsList>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXAllMetricsList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXAllMetricsList),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXPerformanceMonitoringServicesVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXPerformanceMonitoringServices) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXPerformanceMonitoringServices) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetSamplingIntervalRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub SetSamplingInterval: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            intervalMs: adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetSamplingInterval: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            intervalMs: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetMaxPerformanceMetricsHistorySizeRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub SetMaxPerformanceMetricsHistorySize: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            sizeSec: adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetMaxPerformanceMetricsHistorySize: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            sizeSec: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub ClearPerformanceMetricsHistory: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXPerformanceMonitoringServices) -> ADLX_RESULT,
    >,
    pub GetCurrentPerformanceMetricsHistorySize: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            sizeSec: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub StartPerformanceMetricsTracking: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXPerformanceMonitoringServices) -> ADLX_RESULT,
    >,
    pub StopPerformanceMetricsTracking: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXPerformanceMonitoringServices) -> ADLX_RESULT,
    >,
    pub GetAllMetricsHistory: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            startMs: adlx_int,
            stopMs: adlx_int,
            ppMetricsList: *mut *mut IADLXAllMetricsList,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUMetricsHistory: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            pGPU: *mut IADLXGPU,
            startMs: adlx_int,
            stopMs: adlx_int,
            ppMetricsList: *mut *mut IADLXGPUMetricsList,
        ) -> ADLX_RESULT,
    >,
    pub GetSystemMetricsHistory: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            startMs: adlx_int,
            stopMs: adlx_int,
            ppMetricsList: *mut *mut IADLXSystemMetricsList,
        ) -> ADLX_RESULT,
    >,
    pub GetFPSHistory: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            startMs: adlx_int,
            stopMs: adlx_int,
            ppMetricsList: *mut *mut IADLXFPSList,
        ) -> ADLX_RESULT,
    >,
    pub GetCurrentAllMetrics: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            ppMetrics: *mut *mut IADLXAllMetrics,
        ) -> ADLX_RESULT,
    >,
    pub GetCurrentGPUMetrics: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            pGPU: *mut IADLXGPU,
            ppMetrics: *mut *mut IADLXGPUMetrics,
        ) -> ADLX_RESULT,
    >,
    pub GetCurrentSystemMetrics: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            ppMetrics: *mut *mut IADLXSystemMetrics,
        ) -> ADLX_RESULT,
    >,
    pub GetCurrentFPS: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            ppMetrics: *mut *mut IADLXFPS,
        ) -> ADLX_RESULT,
    >,
    pub GetSupportedGPUMetrics: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            pGPU: *mut IADLXGPU,
            ppMetricsSupported: *mut *mut IADLXGPUMetricsSupport,
        ) -> ADLX_RESULT,
    >,
    pub GetSupportedSystemMetrics: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXPerformanceMonitoringServices,
            ppMetricsSupported: *mut *mut IADLXSystemMetricsSupport,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXPerformanceMonitoringServicesVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXPerformanceMonitoringServicesVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXPerformanceMonitoringServicesVtbl>(),
        184usize,
        concat!(
            "Size of: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXPerformanceMonitoringServicesVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSamplingIntervalRange) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetSamplingIntervalRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetSamplingInterval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(SetSamplingInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSamplingInterval) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetSamplingInterval)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetMaxPerformanceMetricsHistorySizeRange) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetMaxPerformanceMetricsHistorySizeRange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).SetMaxPerformanceMetricsHistorySize) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(SetMaxPerformanceMetricsHistorySize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetMaxPerformanceMetricsHistorySize) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetMaxPerformanceMetricsHistorySize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ClearPerformanceMetricsHistory) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(ClearPerformanceMetricsHistory)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetCurrentPerformanceMetricsHistorySize) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetCurrentPerformanceMetricsHistorySize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).StartPerformanceMetricsTracking) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(StartPerformanceMetricsTracking)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).StopPerformanceMetricsTracking) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(StopPerformanceMetricsTracking)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAllMetricsHistory) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetAllMetricsHistory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUMetricsHistory) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetGPUMetricsHistory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSystemMetricsHistory) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetSystemMetricsHistory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFPSHistory) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetFPSHistory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentAllMetrics) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetCurrentAllMetrics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentGPUMetrics) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetCurrentGPUMetrics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentSystemMetrics) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetCurrentSystemMetrics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentFPS) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetCurrentFPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSupportedGPUMetrics) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetSupportedGPUMetrics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSupportedSystemMetrics) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServicesVtbl),
            "::",
            stringify!(GetSupportedSystemMetrics)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXPerformanceMonitoringServices {
    pub pVtbl: *const IADLXPerformanceMonitoringServicesVtbl,
}
#[test]
fn bindgen_test_layout_IADLXPerformanceMonitoringServices() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXPerformanceMonitoringServices> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXPerformanceMonitoringServices>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXPerformanceMonitoringServices))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXPerformanceMonitoringServices>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXPerformanceMonitoringServices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXPerformanceMonitoringServices),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetricsSupport1Vtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsSupport1) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetricsSupport1) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport1,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedCPUUsage: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport1,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedSystemRAM: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport1,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedSmartShift: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport1,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetCPUUsageRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport1,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetSystemRAMRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport1,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetSmartShiftRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport1,
            minValue: *mut adlx_int,
            maxValue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedPowerDistribution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetricsSupport1,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetricsSupport1Vtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetricsSupport1Vtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetricsSupport1Vtbl>(),
        80usize,
        concat!("Size of: ", stringify!(IADLXSystemMetricsSupport1Vtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetricsSupport1Vtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetricsSupport1Vtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedCPUUsage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(IsSupportedCPUUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedSystemRAM) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(IsSupportedSystemRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedSmartShift) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(IsSupportedSmartShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCPUUsageRange) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(GetCPUUsageRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSystemRAMRange) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(GetSystemRAMRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSmartShiftRange) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(GetSmartShiftRange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsSupportedPowerDistribution) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1Vtbl),
            "::",
            stringify!(IsSupportedPowerDistribution)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetricsSupport1 {
    pub pVtbl: *const IADLXSystemMetricsSupport1Vtbl,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetricsSupport1() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetricsSupport1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetricsSupport1>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXSystemMetricsSupport1))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetricsSupport1>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetricsSupport1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetricsSupport1),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetrics1Vtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics1) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics1) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetrics1,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub TimeStamp: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics1, ms: *mut adlx_int64) -> ADLX_RESULT,
    >,
    pub CPUUsage: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetrics1,
            data: *mut adlx_double,
        ) -> ADLX_RESULT,
    >,
    pub SystemRAM: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics1, data: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub SmartShift: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXSystemMetrics1, data: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub PowerDistribution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXSystemMetrics1,
            apuShiftValue: *mut adlx_int,
            gpuShiftValue: *mut adlx_int,
            apuShiftLimit: *mut adlx_int,
            gpuShiftLimit: *mut adlx_int,
            totalShiftLimit: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetrics1Vtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetrics1Vtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetrics1Vtbl>(),
        64usize,
        concat!("Size of: ", stringify!(IADLXSystemMetrics1Vtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetrics1Vtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetrics1Vtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1Vtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1Vtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1Vtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeStamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1Vtbl),
            "::",
            stringify!(TimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CPUUsage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1Vtbl),
            "::",
            stringify!(CPUUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SystemRAM) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1Vtbl),
            "::",
            stringify!(SystemRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SmartShift) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1Vtbl),
            "::",
            stringify!(SmartShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PowerDistribution) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1Vtbl),
            "::",
            stringify!(PowerDistribution)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXSystemMetrics1 {
    pub pVtbl: *const IADLXSystemMetrics1Vtbl,
}
#[test]
fn bindgen_test_layout_IADLXSystemMetrics1() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXSystemMetrics1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXSystemMetrics1>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXSystemMetrics1))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXSystemMetrics1>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXSystemMetrics1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXSystemMetrics1),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXChangedEventVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXChangedEvent) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXChangedEvent) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXChangedEvent,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetOrigin: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXChangedEvent) -> ADLX_SYNC_ORIGIN,
    >,
}
#[test]
fn bindgen_test_layout_IADLXChangedEventVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXChangedEventVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXChangedEventVtbl>(),
        32usize,
        concat!("Size of: ", stringify!(IADLXChangedEventVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXChangedEventVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXChangedEventVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXChangedEventVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXChangedEventVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXChangedEventVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetOrigin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXChangedEventVtbl),
            "::",
            stringify!(GetOrigin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXChangedEvent {
    pub pVtbl: *const IADLXChangedEventVtbl,
}
#[test]
fn bindgen_test_layout_IADLXChangedEvent() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXChangedEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXChangedEvent>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXChangedEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXChangedEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXChangedEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXChangedEvent),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DAntiLagVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiLag,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag, supported: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag, enabled: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag, enable: adlx_bool) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DAntiLagVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DAntiLagVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DAntiLagVtbl>(),
        48usize,
        concat!("Size of: ", stringify!(IADLX3DAntiLagVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DAntiLagVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DAntiLagVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLagVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLagVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLagVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLagVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLagVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLagVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DAntiLag {
    pub pVtbl: *const IADLX3DAntiLagVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DAntiLag() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DAntiLag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DAntiLag>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DAntiLag))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DAntiLag>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DAntiLag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DAntiLag1Vtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag1) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag1) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiLag1,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag1, supported: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag1, enabled: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag1, enable: adlx_bool) -> ADLX_RESULT,
    >,
    pub GetLevel: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiLag1,
            level: *mut ADLX_ANTILAG_STATE,
        ) -> ADLX_RESULT,
    >,
    pub SetLevel: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAntiLag1, level: ADLX_ANTILAG_STATE) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DAntiLag1Vtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DAntiLag1Vtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DAntiLag1Vtbl>(),
        64usize,
        concat!("Size of: ", stringify!(IADLX3DAntiLag1Vtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DAntiLag1Vtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DAntiLag1Vtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1Vtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1Vtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1Vtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1Vtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1Vtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1Vtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLevel) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1Vtbl),
            "::",
            stringify!(GetLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLevel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1Vtbl),
            "::",
            stringify!(SetLevel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DAntiLag1 {
    pub pVtbl: *const IADLX3DAntiLag1Vtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DAntiLag1() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DAntiLag1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DAntiLag1>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DAntiLag1))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DAntiLag1>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DAntiLag1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiLag1),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DChillVtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DChill) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DChill) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DChill,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DChill, supported: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DChill, isEnabled: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub GetFPSRange: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DChill, range: *mut ADLX_IntRange) -> ADLX_RESULT,
    >,
    pub GetMinFPS: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DChill, currentMinFPS: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub GetMaxFPS: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DChill, currentMaxFPS: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DChill, enable: adlx_bool) -> ADLX_RESULT,
    >,
    pub SetMinFPS: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DChill, minFPS: adlx_int) -> ADLX_RESULT,
    >,
    pub SetMaxFPS: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DChill, maxFPS: adlx_int) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DChillVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DChillVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DChillVtbl>(),
        88usize,
        concat!("Size of: ", stringify!(IADLX3DChillVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DChillVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DChillVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFPSRange) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(GetFPSRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMinFPS) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(GetMinFPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMaxFPS) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(GetMaxFPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMinFPS) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(SetMinFPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMaxFPS) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChillVtbl),
            "::",
            stringify!(SetMaxFPS)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DChill {
    pub pVtbl: *const IADLX3DChillVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DChill() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DChill> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DChill>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DChill))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DChill>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DChill))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DChill),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DBoostVtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DBoost) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DBoost) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DBoost,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DBoost, supported: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DBoost, isEnabled: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub GetResolutionRange: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DBoost, range: *mut ADLX_IntRange) -> ADLX_RESULT,
    >,
    pub GetResolution: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DBoost, currentMinRes: *mut adlx_int) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DBoost, enable: adlx_bool) -> ADLX_RESULT,
    >,
    pub SetResolution: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DBoost, minRes: adlx_int) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DBoostVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DBoostVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DBoostVtbl>(),
        72usize,
        concat!("Size of: ", stringify!(IADLX3DBoostVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DBoostVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DBoostVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetResolutionRange) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(GetResolutionRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetResolution) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(GetResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetResolution) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoostVtbl),
            "::",
            stringify!(SetResolution)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DBoost {
    pub pVtbl: *const IADLX3DBoostVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DBoost() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DBoost> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DBoost>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DBoost))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DBoost>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DBoost))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DBoost),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DImageSharpeningVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DImageSharpening) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DImageSharpening) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DImageSharpening,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DImageSharpening,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DImageSharpening,
            isEnabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetSharpnessRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DImageSharpening,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub GetSharpness: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DImageSharpening,
            currentSharpness: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DImageSharpening, enable: adlx_bool) -> ADLX_RESULT,
    >,
    pub SetSharpness: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DImageSharpening,
            sharpness: adlx_int,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DImageSharpeningVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DImageSharpeningVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DImageSharpeningVtbl>(),
        72usize,
        concat!("Size of: ", stringify!(IADLX3DImageSharpeningVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DImageSharpeningVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DImageSharpeningVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSharpnessRange) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(GetSharpnessRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSharpness) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(GetSharpness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetSharpness) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpeningVtbl),
            "::",
            stringify!(SetSharpness)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DImageSharpening {
    pub pVtbl: *const IADLX3DImageSharpeningVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DImageSharpening() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DImageSharpening> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DImageSharpening>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DImageSharpening))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DImageSharpening>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DImageSharpening))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DImageSharpening),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DEnhancedSyncVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DEnhancedSync) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DEnhancedSync) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DEnhancedSync,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DEnhancedSync,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DEnhancedSync,
            isEnabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DEnhancedSync, enable: adlx_bool) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DEnhancedSyncVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DEnhancedSyncVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DEnhancedSyncVtbl>(),
        48usize,
        concat!("Size of: ", stringify!(IADLX3DEnhancedSyncVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DEnhancedSyncVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DEnhancedSyncVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DEnhancedSyncVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DEnhancedSyncVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DEnhancedSyncVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DEnhancedSyncVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DEnhancedSyncVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DEnhancedSyncVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DEnhancedSync {
    pub pVtbl: *const IADLX3DEnhancedSyncVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DEnhancedSync() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DEnhancedSync> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DEnhancedSync>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DEnhancedSync))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DEnhancedSync>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DEnhancedSync))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DEnhancedSync),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DWaitForVerticalRefreshVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DWaitForVerticalRefresh) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DWaitForVerticalRefresh) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DWaitForVerticalRefresh,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DWaitForVerticalRefresh,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DWaitForVerticalRefresh,
            isEnabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DWaitForVerticalRefresh,
            currentMode: *mut ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE,
        ) -> ADLX_RESULT,
    >,
    pub SetMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DWaitForVerticalRefresh,
            mode: ADLX_WAIT_FOR_VERTICAL_REFRESH_MODE,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DWaitForVerticalRefreshVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DWaitForVerticalRefreshVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DWaitForVerticalRefreshVtbl>(),
        56usize,
        concat!("Size of: ", stringify!(IADLX3DWaitForVerticalRefreshVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DWaitForVerticalRefreshVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLX3DWaitForVerticalRefreshVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DWaitForVerticalRefreshVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DWaitForVerticalRefreshVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DWaitForVerticalRefreshVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DWaitForVerticalRefreshVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DWaitForVerticalRefreshVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DWaitForVerticalRefreshVtbl),
            "::",
            stringify!(GetMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DWaitForVerticalRefreshVtbl),
            "::",
            stringify!(SetMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DWaitForVerticalRefresh {
    pub pVtbl: *const IADLX3DWaitForVerticalRefreshVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DWaitForVerticalRefresh() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DWaitForVerticalRefresh> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DWaitForVerticalRefresh>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DWaitForVerticalRefresh))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DWaitForVerticalRefresh>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DWaitForVerticalRefresh))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DWaitForVerticalRefresh),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DFrameRateTargetControlVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DFrameRateTargetControl) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DFrameRateTargetControl) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DFrameRateTargetControl,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DFrameRateTargetControl,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DFrameRateTargetControl,
            isEnabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetFPSRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DFrameRateTargetControl,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub GetFPS: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DFrameRateTargetControl,
            currentFPS: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DFrameRateTargetControl,
            enable: adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetFPS: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DFrameRateTargetControl,
            maxFPS: adlx_int,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DFrameRateTargetControlVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DFrameRateTargetControlVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DFrameRateTargetControlVtbl>(),
        72usize,
        concat!("Size of: ", stringify!(IADLX3DFrameRateTargetControlVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DFrameRateTargetControlVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLX3DFrameRateTargetControlVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFPSRange) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(GetFPSRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFPS) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(GetFPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetFPS) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControlVtbl),
            "::",
            stringify!(SetFPS)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DFrameRateTargetControl {
    pub pVtbl: *const IADLX3DFrameRateTargetControlVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DFrameRateTargetControl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DFrameRateTargetControl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DFrameRateTargetControl>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DFrameRateTargetControl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DFrameRateTargetControl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DFrameRateTargetControl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DFrameRateTargetControl),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DAntiAliasingVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DAntiAliasing) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DAntiAliasing) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiAliasing,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiAliasing,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiAliasing,
            currentMode: *mut ADLX_ANTI_ALIASING_MODE,
        ) -> ADLX_RESULT,
    >,
    pub GetLevel: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiAliasing,
            currentLevel: *mut ADLX_ANTI_ALIASING_LEVEL,
        ) -> ADLX_RESULT,
    >,
    pub GetMethod: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiAliasing,
            currentMethod: *mut ADLX_ANTI_ALIASING_METHOD,
        ) -> ADLX_RESULT,
    >,
    pub SetMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiAliasing,
            mode: ADLX_ANTI_ALIASING_MODE,
        ) -> ADLX_RESULT,
    >,
    pub SetLevel: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiAliasing,
            level: ADLX_ANTI_ALIASING_LEVEL,
        ) -> ADLX_RESULT,
    >,
    pub SetMethod: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAntiAliasing,
            method: ADLX_ANTI_ALIASING_METHOD,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DAntiAliasingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DAntiAliasingVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DAntiAliasingVtbl>(),
        80usize,
        concat!("Size of: ", stringify!(IADLX3DAntiAliasingVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DAntiAliasingVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DAntiAliasingVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(GetMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLevel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(GetLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMethod) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(GetMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMode) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(SetMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLevel) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(SetLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMethod) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasingVtbl),
            "::",
            stringify!(SetMethod)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DAntiAliasing {
    pub pVtbl: *const IADLX3DAntiAliasingVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DAntiAliasing() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DAntiAliasing> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DAntiAliasing>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DAntiAliasing))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DAntiAliasing>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DAntiAliasing))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAntiAliasing),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DMorphologicalAntiAliasingVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DMorphologicalAntiAliasing) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DMorphologicalAntiAliasing) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DMorphologicalAntiAliasing,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DMorphologicalAntiAliasing,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DMorphologicalAntiAliasing,
            isEnabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DMorphologicalAntiAliasing,
            enable: adlx_bool,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DMorphologicalAntiAliasingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DMorphologicalAntiAliasingVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DMorphologicalAntiAliasingVtbl>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(IADLX3DMorphologicalAntiAliasingVtbl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DMorphologicalAntiAliasingVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLX3DMorphologicalAntiAliasingVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DMorphologicalAntiAliasingVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DMorphologicalAntiAliasingVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DMorphologicalAntiAliasingVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DMorphologicalAntiAliasingVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DMorphologicalAntiAliasingVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DMorphologicalAntiAliasingVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DMorphologicalAntiAliasing {
    pub pVtbl: *const IADLX3DMorphologicalAntiAliasingVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DMorphologicalAntiAliasing() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DMorphologicalAntiAliasing> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DMorphologicalAntiAliasing>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DMorphologicalAntiAliasing))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DMorphologicalAntiAliasing>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLX3DMorphologicalAntiAliasing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DMorphologicalAntiAliasing),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DAnisotropicFilteringVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAnisotropicFiltering) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DAnisotropicFiltering) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAnisotropicFiltering,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAnisotropicFiltering,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAnisotropicFiltering,
            isEnabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetLevel: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAnisotropicFiltering,
            currentLevel: *mut ADLX_ANISOTROPIC_FILTERING_LEVEL,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAnisotropicFiltering,
            enable: adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetLevel: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DAnisotropicFiltering,
            level: ADLX_ANISOTROPIC_FILTERING_LEVEL,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DAnisotropicFilteringVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DAnisotropicFilteringVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DAnisotropicFilteringVtbl>(),
        64usize,
        concat!("Size of: ", stringify!(IADLX3DAnisotropicFilteringVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DAnisotropicFilteringVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DAnisotropicFilteringVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFilteringVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFilteringVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFilteringVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFilteringVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFilteringVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLevel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFilteringVtbl),
            "::",
            stringify!(GetLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFilteringVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLevel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFilteringVtbl),
            "::",
            stringify!(SetLevel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DAnisotropicFiltering {
    pub pVtbl: *const IADLX3DAnisotropicFilteringVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DAnisotropicFiltering() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DAnisotropicFiltering> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DAnisotropicFiltering>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DAnisotropicFiltering))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DAnisotropicFiltering>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DAnisotropicFiltering))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DAnisotropicFiltering),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DTessellationVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DTessellation) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLX3DTessellation) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DTessellation,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DTessellation,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DTessellation,
            currentMode: *mut ADLX_TESSELLATION_MODE,
        ) -> ADLX_RESULT,
    >,
    pub GetLevel: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DTessellation,
            currentLevel: *mut ADLX_TESSELLATION_LEVEL,
        ) -> ADLX_RESULT,
    >,
    pub SetMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DTessellation,
            mode: ADLX_TESSELLATION_MODE,
        ) -> ADLX_RESULT,
    >,
    pub SetLevel: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DTessellation,
            level: ADLX_TESSELLATION_LEVEL,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DTessellationVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DTessellationVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DTessellationVtbl>(),
        64usize,
        concat!("Size of: ", stringify!(IADLX3DTessellationVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DTessellationVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DTessellationVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellationVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellationVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellationVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellationVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellationVtbl),
            "::",
            stringify!(GetMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLevel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellationVtbl),
            "::",
            stringify!(GetLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellationVtbl),
            "::",
            stringify!(SetMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLevel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellationVtbl),
            "::",
            stringify!(SetLevel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DTessellation {
    pub pVtbl: *const IADLX3DTessellationVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DTessellation() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DTessellation> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DTessellation>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DTessellation))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DTessellation>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DTessellation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DTessellation),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DRadeonSuperResolutionVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DRadeonSuperResolution) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DRadeonSuperResolution) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DRadeonSuperResolution,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DRadeonSuperResolution,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DRadeonSuperResolution,
            enabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DRadeonSuperResolution,
            enable: adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetSharpnessRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DRadeonSuperResolution,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub GetSharpness: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DRadeonSuperResolution,
            currentSharpness: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetSharpness: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DRadeonSuperResolution,
            sharpness: adlx_int,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DRadeonSuperResolutionVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DRadeonSuperResolutionVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DRadeonSuperResolutionVtbl>(),
        72usize,
        concat!("Size of: ", stringify!(IADLX3DRadeonSuperResolutionVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DRadeonSuperResolutionVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSharpnessRange) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(GetSharpnessRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSharpness) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(GetSharpness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetSharpness) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolutionVtbl),
            "::",
            stringify!(SetSharpness)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DRadeonSuperResolution {
    pub pVtbl: *const IADLX3DRadeonSuperResolutionVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DRadeonSuperResolution() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DRadeonSuperResolution> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DRadeonSuperResolution>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DRadeonSuperResolution))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DRadeonSuperResolution>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DRadeonSuperResolution))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DRadeonSuperResolution),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DResetShaderCacheVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DResetShaderCache) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DResetShaderCache) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DResetShaderCache,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DResetShaderCache,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub ResetShaderCache: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DResetShaderCache) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DResetShaderCacheVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DResetShaderCacheVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DResetShaderCacheVtbl>(),
        40usize,
        concat!("Size of: ", stringify!(IADLX3DResetShaderCacheVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DResetShaderCacheVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DResetShaderCacheVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DResetShaderCacheVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DResetShaderCacheVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DResetShaderCacheVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DResetShaderCacheVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetShaderCache) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DResetShaderCacheVtbl),
            "::",
            stringify!(ResetShaderCache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DResetShaderCache {
    pub pVtbl: *const IADLX3DResetShaderCacheVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DResetShaderCache() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DResetShaderCache> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DResetShaderCache>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DResetShaderCache))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DResetShaderCache>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DResetShaderCache))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DResetShaderCache),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DSettingsChangedEventVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsChangedEvent,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetOrigin: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> ADLX_SYNC_ORIGIN,
    >,
    pub GetGPU: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsChangedEvent,
            ppGPU: *mut *mut IADLXGPU,
        ) -> ADLX_RESULT,
    >,
    pub IsAntiLagChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsChillChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsBoostChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsImageSharpeningChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsEnhancedSyncChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsWaitForVerticalRefreshChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsFrameRateTargetControlChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsAntiAliasingChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsMorphologicalAntiAliasingChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsAnisotropicFilteringChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsTessellationModeChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsRadeonSuperResolutionChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
    pub IsResetShaderCache: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedEvent) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DSettingsChangedEventVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DSettingsChangedEventVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DSettingsChangedEventVtbl>(),
        144usize,
        concat!("Size of: ", stringify!(IADLX3DSettingsChangedEventVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DSettingsChangedEventVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DSettingsChangedEventVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetOrigin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(GetOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPU) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(GetGPU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsAntiLagChanged) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsAntiLagChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsChillChanged) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsChillChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsBoostChanged) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsBoostChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsImageSharpeningChanged) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsImageSharpeningChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnhancedSyncChanged) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsEnhancedSyncChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsWaitForVerticalRefreshChanged) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsWaitForVerticalRefreshChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsFrameRateTargetControlChanged) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsFrameRateTargetControlChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsAntiAliasingChanged) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsAntiAliasingChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsMorphologicalAntiAliasingChanged) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsMorphologicalAntiAliasingChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsAnisotropicFilteringChanged) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsAnisotropicFilteringChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsTessellationModeChanged) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsTessellationModeChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsRadeonSuperResolutionChanged) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsRadeonSuperResolutionChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsResetShaderCache) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEventVtbl),
            "::",
            stringify!(IsResetShaderCache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DSettingsChangedEvent {
    pub pVtbl: *const IADLX3DSettingsChangedEventVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DSettingsChangedEvent() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DSettingsChangedEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DSettingsChangedEvent>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DSettingsChangedEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DSettingsChangedEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DSettingsChangedEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedEvent),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DSettingsChangedListenerVtbl {
    pub On3DSettingsChanged: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsChangedListener,
            p3DSettingsChangedEvent: *mut IADLX3DSettingsChangedEvent,
        ) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DSettingsChangedListenerVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DSettingsChangedListenerVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DSettingsChangedListenerVtbl>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DSettingsChangedListenerVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DSettingsChangedListenerVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLX3DSettingsChangedListenerVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).On3DSettingsChanged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedListenerVtbl),
            "::",
            stringify!(On3DSettingsChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DSettingsChangedListener {
    pub pVtbl: *const IADLX3DSettingsChangedListenerVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DSettingsChangedListener() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DSettingsChangedListener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DSettingsChangedListener>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DSettingsChangedListener))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DSettingsChangedListener>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DSettingsChangedListener))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedListener),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DSettingsChangedHandlingVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedHandling) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsChangedHandling) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsChangedHandling,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Add3DSettingsEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsChangedHandling,
            p3DSettingsChangedListener: *mut IADLX3DSettingsChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub Remove3DSettingsEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsChangedHandling,
            p3DSettingsChangedListener: *mut IADLX3DSettingsChangedListener,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DSettingsChangedHandlingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DSettingsChangedHandlingVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DSettingsChangedHandlingVtbl>(),
        40usize,
        concat!("Size of: ", stringify!(IADLX3DSettingsChangedHandlingVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DSettingsChangedHandlingVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLX3DSettingsChangedHandlingVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedHandlingVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedHandlingVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedHandlingVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add3DSettingsEventListener) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedHandlingVtbl),
            "::",
            stringify!(Add3DSettingsEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Remove3DSettingsEventListener) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedHandlingVtbl),
            "::",
            stringify!(Remove3DSettingsEventListener)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DSettingsChangedHandling {
    pub pVtbl: *const IADLX3DSettingsChangedHandlingVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DSettingsChangedHandling() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DSettingsChangedHandling> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DSettingsChangedHandling>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DSettingsChangedHandling))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DSettingsChangedHandling>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DSettingsChangedHandling))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsChangedHandling),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DSettingsServicesVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsServices) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLX3DSettingsServices) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetAntiLag: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DAntiLag: *mut *mut IADLX3DAntiLag,
        ) -> ADLX_RESULT,
    >,
    pub GetChill: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DChill: *mut *mut IADLX3DChill,
        ) -> ADLX_RESULT,
    >,
    pub GetBoost: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DBoost: *mut *mut IADLX3DBoost,
        ) -> ADLX_RESULT,
    >,
    pub GetImageSharpening: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DImageSharpening: *mut *mut IADLX3DImageSharpening,
        ) -> ADLX_RESULT,
    >,
    pub GetEnhancedSync: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DEnhancedSync: *mut *mut IADLX3DEnhancedSync,
        ) -> ADLX_RESULT,
    >,
    pub GetWaitForVerticalRefresh: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DWaitForVerticalRefresh: *mut *mut IADLX3DWaitForVerticalRefresh,
        ) -> ADLX_RESULT,
    >,
    pub GetFrameRateTargetControl: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DFrameRateTargetControl: *mut *mut IADLX3DFrameRateTargetControl,
        ) -> ADLX_RESULT,
    >,
    pub GetAntiAliasing: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DAntiAliasing: *mut *mut IADLX3DAntiAliasing,
        ) -> ADLX_RESULT,
    >,
    pub GetMorphologicalAntiAliasing: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DMorphologicalAntiAliasing: *mut *mut IADLX3DMorphologicalAntiAliasing,
        ) -> ADLX_RESULT,
    >,
    pub GetAnisotropicFiltering: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DAnisotropicFiltering: *mut *mut IADLX3DAnisotropicFiltering,
        ) -> ADLX_RESULT,
    >,
    pub GetTessellation: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DTessellation: *mut *mut IADLX3DTessellation,
        ) -> ADLX_RESULT,
    >,
    pub GetRadeonSuperResolution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pp3DRadeonSuperResolution: *mut *mut IADLX3DRadeonSuperResolution,
        ) -> ADLX_RESULT,
    >,
    pub GetResetShaderCache: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pGPU: *mut IADLXGPU,
            pp3DResetShaderCache: *mut *mut IADLX3DResetShaderCache,
        ) -> ADLX_RESULT,
    >,
    pub Get3DSettingsChangedHandling: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLX3DSettingsServices,
            pp3DSettingsChangedHandling: *mut *mut IADLX3DSettingsChangedHandling,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX3DSettingsServicesVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DSettingsServicesVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DSettingsServicesVtbl>(),
        136usize,
        concat!("Size of: ", stringify!(IADLX3DSettingsServicesVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DSettingsServicesVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DSettingsServicesVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAntiLag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetAntiLag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetChill) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetChill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBoost) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetBoost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetImageSharpening) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetImageSharpening)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEnhancedSync) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetEnhancedSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetWaitForVerticalRefresh) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetWaitForVerticalRefresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameRateTargetControl) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetFrameRateTargetControl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAntiAliasing) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetAntiAliasing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetMorphologicalAntiAliasing) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetMorphologicalAntiAliasing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAnisotropicFiltering) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetAnisotropicFiltering)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTessellation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetTessellation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetRadeonSuperResolution) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetRadeonSuperResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetResetShaderCache) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(GetResetShaderCache)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Get3DSettingsChangedHandling) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServicesVtbl),
            "::",
            stringify!(Get3DSettingsChangedHandling)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX3DSettingsServices {
    pub pVtbl: *const IADLX3DSettingsServicesVtbl,
}
#[test]
fn bindgen_test_layout_IADLX3DSettingsServices() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX3DSettingsServices> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX3DSettingsServices>(),
        8usize,
        concat!("Size of: ", stringify!(IADLX3DSettingsServices))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX3DSettingsServices>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX3DSettingsServices))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX3DSettingsServices),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXFreeSyncVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayFreeSync) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayFreeSync) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayFreeSync,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayFreeSync,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayFreeSync,
            enabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayFreeSync, enabled: adlx_bool) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXFreeSyncVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXFreeSyncVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXFreeSyncVtbl>(),
        48usize,
        concat!("Size of: ", stringify!(IADLXFreeSyncVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXFreeSyncVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXFreeSyncVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFreeSyncVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFreeSyncVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFreeSyncVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFreeSyncVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFreeSyncVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXFreeSyncVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayFreeSync {
    pub pVtbl: *const IADLXFreeSyncVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayFreeSync() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayFreeSync> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayFreeSync>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayFreeSync))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayFreeSync>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayFreeSync))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayFreeSync),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXVSRVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayVSR) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayVSR) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVSR,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVSR, supported: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVSR, enabled: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVSR, enabled: adlx_bool) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXVSRVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXVSRVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXVSRVtbl>(),
        48usize,
        concat!("Size of: ", stringify!(IADLXVSRVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXVSRVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXVSRVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXVSRVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXVSRVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXVSRVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXVSRVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXVSRVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXVSRVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayVSR {
    pub pVtbl: *const IADLXVSRVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayVSR() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayVSR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayVSR>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayVSR))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayVSR>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayVSR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVSR),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXGPUScalingVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGPUScaling) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGPUScaling) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGPUScaling,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGPUScaling,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGPUScaling,
            enabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGPUScaling, enabled: adlx_bool) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXGPUScalingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXGPUScalingVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXGPUScalingVtbl>(),
        48usize,
        concat!("Size of: ", stringify!(IADLXGPUScalingVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXGPUScalingVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXGPUScalingVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUScalingVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUScalingVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUScalingVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUScalingVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUScalingVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXGPUScalingVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGPUScaling {
    pub pVtbl: *const IADLXGPUScalingVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGPUScaling() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGPUScaling> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGPUScaling>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayGPUScaling))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGPUScaling>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayGPUScaling))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGPUScaling),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayScalingModeVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayScalingMode) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayScalingMode) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayScalingMode,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayScalingMode,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayScalingMode,
            currentMode: *mut ADLX_SCALE_MODE,
        ) -> ADLX_RESULT,
    >,
    pub SetMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayScalingMode,
            mode: ADLX_SCALE_MODE,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayScalingModeVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayScalingModeVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayScalingModeVtbl>(),
        48usize,
        concat!("Size of: ", stringify!(IADLXDisplayScalingModeVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayScalingModeVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayScalingModeVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayScalingModeVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayScalingModeVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayScalingModeVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayScalingModeVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayScalingModeVtbl),
            "::",
            stringify!(GetMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayScalingModeVtbl),
            "::",
            stringify!(SetMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayScalingMode {
    pub pVtbl: *const IADLXDisplayScalingModeVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayScalingMode() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayScalingMode> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayScalingMode>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayScalingMode))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayScalingMode>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayScalingMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayScalingMode),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXIntegerScalingVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayIntegerScaling) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayIntegerScaling) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayIntegerScaling,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayIntegerScaling,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayIntegerScaling,
            enabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayIntegerScaling,
            enabled: adlx_bool,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXIntegerScalingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXIntegerScalingVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXIntegerScalingVtbl>(),
        48usize,
        concat!("Size of: ", stringify!(IADLXIntegerScalingVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXIntegerScalingVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXIntegerScalingVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXIntegerScalingVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXIntegerScalingVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXIntegerScalingVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXIntegerScalingVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXIntegerScalingVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXIntegerScalingVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayIntegerScaling {
    pub pVtbl: *const IADLXIntegerScalingVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayIntegerScaling() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayIntegerScaling> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayIntegerScaling>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayIntegerScaling))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayIntegerScaling>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayIntegerScaling))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayIntegerScaling),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX_COLOR_DEPTHVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayColorDepth) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayColorDepth) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetValue: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            currentColorDepth: *mut ADLX_COLOR_DEPTH,
        ) -> ADLX_RESULT,
    >,
    pub SetValue: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            colorDepth: ADLX_COLOR_DEPTH,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedColorDepth: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            colorDepth: ADLX_COLOR_DEPTH,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedBPC_6: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedBPC_8: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedBPC_10: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedBPC_12: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedBPC_14: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedBPC_16: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayColorDepth,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX_COLOR_DEPTHVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX_COLOR_DEPTHVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX_COLOR_DEPTHVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLX_COLOR_DEPTHVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX_COLOR_DEPTHVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX_COLOR_DEPTHVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetValue) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(GetValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetValue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(SetValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedColorDepth) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(IsSupportedColorDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedBPC_6) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(IsSupportedBPC_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedBPC_8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(IsSupportedBPC_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedBPC_10) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(IsSupportedBPC_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedBPC_12) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(IsSupportedBPC_12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedBPC_14) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(IsSupportedBPC_14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedBPC_16) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_COLOR_DEPTHVtbl),
            "::",
            stringify!(IsSupportedBPC_16)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayColorDepth {
    pub pVtbl: *const IADLX_COLOR_DEPTHVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayColorDepth() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayColorDepth> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayColorDepth>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayColorDepth))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayColorDepth>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayColorDepth))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayColorDepth),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLX_PIXEL_FORMATVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayPixelFormat) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayPixelFormat) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetValue: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            pixelFormat: *mut ADLX_PIXEL_FORMAT,
        ) -> ADLX_RESULT,
    >,
    pub SetValue: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            pixelFormat: ADLX_PIXEL_FORMAT,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            pixelFormat: ADLX_PIXEL_FORMAT,
            supportd: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedRGB444Full: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            supportd: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedYCbCr444: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            supportd: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedYCbCr422: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            supportd: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedRGB444Limited: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            supportd: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedYCbCr420: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayPixelFormat,
            supportd: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLX_PIXEL_FORMATVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLX_PIXEL_FORMATVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLX_PIXEL_FORMATVtbl>(),
        96usize,
        concat!("Size of: ", stringify!(IADLX_PIXEL_FORMATVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLX_PIXEL_FORMATVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLX_PIXEL_FORMATVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetValue) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(GetValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetValue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(SetValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedPixelFormat) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(IsSupportedPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedRGB444Full) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(IsSupportedRGB444Full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedYCbCr444) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(IsSupportedYCbCr444)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedYCbCr422) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(IsSupportedYCbCr422)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedRGB444Limited) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(IsSupportedRGB444Limited)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedYCbCr420) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLX_PIXEL_FORMATVtbl),
            "::",
            stringify!(IsSupportedYCbCr420)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayPixelFormat {
    pub pVtbl: *const IADLX_PIXEL_FORMATVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayPixelFormat() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayPixelFormat> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayPixelFormat>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayPixelFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayPixelFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayPixelFormat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayPixelFormat),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXCustomColorVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayCustomColor) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayCustomColor) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsHueSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetHueRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub GetHue: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            currentHue: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetHue: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayCustomColor, hue: adlx_int) -> ADLX_RESULT,
    >,
    pub IsSaturationSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetSaturationRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub GetSaturation: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            currentSaturation: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetSaturation: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            saturation: adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub IsBrightnessSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetBrightnessRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub GetBrightness: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            currentBrightness: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetBrightness: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            brightness: adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub IsContrastSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetContrastRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub GetContrast: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            currentContrast: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetContrast: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            contrast: adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub IsTemperatureSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetTemperatureRange: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            range: *mut ADLX_IntRange,
        ) -> ADLX_RESULT,
    >,
    pub GetTemperature: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            currentTemperature: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetTemperature: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomColor,
            temperature: adlx_int,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXCustomColorVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXCustomColorVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXCustomColorVtbl>(),
        184usize,
        concat!("Size of: ", stringify!(IADLXCustomColorVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXCustomColorVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXCustomColorVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsHueSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(IsHueSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetHueRange) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetHueRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetHue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetHue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetHue) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(SetHue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSaturationSupported) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(IsSaturationSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSaturationRange) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetSaturationRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSaturation) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetSaturation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetSaturation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(SetSaturation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsBrightnessSupported) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(IsBrightnessSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBrightnessRange) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetBrightnessRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBrightness) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetBrightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetBrightness) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(SetBrightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsContrastSupported) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(IsContrastSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetContrastRange) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetContrastRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetContrast) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetContrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetContrast) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(SetContrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsTemperatureSupported) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(IsTemperatureSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTemperatureRange) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetTemperatureRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTemperature) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(GetTemperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetTemperature) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXCustomColorVtbl),
            "::",
            stringify!(SetTemperature)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayCustomColor {
    pub pVtbl: *const IADLXCustomColorVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayCustomColor() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayCustomColor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayCustomColor>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayCustomColor))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayCustomColor>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayCustomColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomColor),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXHDCPVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayHDCP) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayHDCP) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayHDCP,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayHDCP,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayHDCP, enabled: *mut adlx_bool) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayHDCP, enabled: adlx_bool) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXHDCPVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXHDCPVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXHDCPVtbl>(),
        48usize,
        concat!("Size of: ", stringify!(IADLXHDCPVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXHDCPVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXHDCPVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXHDCPVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXHDCPVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXHDCPVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXHDCPVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXHDCPVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXHDCPVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayHDCP {
    pub pVtbl: *const IADLXHDCPVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayHDCP() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayHDCP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayHDCP>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayHDCP))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayHDCP>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayHDCP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayHDCP),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayResolutionVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolution) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolution) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayResolution,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetValue: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayResolution,
            cr: *mut ADLX_CustomResolution,
        ) -> ADLX_RESULT,
    >,
    pub SetValue: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayResolution,
            cr: ADLX_CustomResolution,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayResolutionVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayResolutionVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayResolutionVtbl>(),
        40usize,
        concat!("Size of: ", stringify!(IADLXDisplayResolutionVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayResolutionVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayResolutionVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetValue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionVtbl),
            "::",
            stringify!(GetValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetValue) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionVtbl),
            "::",
            stringify!(SetValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayResolution {
    pub pVtbl: *const IADLXDisplayResolutionVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayResolution() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayResolution> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayResolution>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayResolution))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayResolution>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayResolution))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolution),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayResolutionListVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolutionList) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolutionList) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayResolutionList,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Size: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolutionList) -> adlx_uint,
    >,
    pub Empty: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolutionList) -> adlx_bool,
    >,
    pub Begin: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolutionList) -> adlx_uint,
    >,
    pub End: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolutionList) -> adlx_uint,
    >,
    pub At: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayResolutionList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub Clear: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolutionList) -> ADLX_RESULT,
    >,
    pub Remove_Back: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayResolutionList) -> ADLX_RESULT,
    >,
    pub Add_Back: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayResolutionList,
            pItem: *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub At_DisplayResolutionList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayResolutionList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXDisplayResolution,
        ) -> ADLX_RESULT,
    >,
    pub Add_Back_DisplayResolutionList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayResolutionList,
            pItem: *mut IADLXDisplayResolution,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayResolutionListVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayResolutionListVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayResolutionListVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLXDisplayResolutionListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayResolutionListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayResolutionListVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(End)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(At)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clear) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove_Back) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Remove_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Add_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At_DisplayResolutionList) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(At_DisplayResolutionList)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Add_Back_DisplayResolutionList) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionListVtbl),
            "::",
            stringify!(Add_Back_DisplayResolutionList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayResolutionList {
    pub pVtbl: *const IADLXDisplayResolutionListVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayResolutionList() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayResolutionList> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayResolutionList>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayResolutionList))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayResolutionList>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayResolutionList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayResolutionList),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayCustomResolutionVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayCustomResolution) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayCustomResolution) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomResolution,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomResolution,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetResolutionList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomResolution,
            ppResolutionList: *mut *mut IADLXDisplayResolutionList,
        ) -> ADLX_RESULT,
    >,
    pub GetCurrentAppliedResolution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomResolution,
            ppResolution: *mut *mut IADLXDisplayResolution,
        ) -> ADLX_RESULT,
    >,
    pub CreateNewResolution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomResolution,
            pResolution: *mut IADLXDisplayResolution,
        ) -> ADLX_RESULT,
    >,
    pub DeleteResolution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayCustomResolution,
            pResolution: *mut IADLXDisplayResolution,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayCustomResolutionVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayCustomResolutionVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayCustomResolutionVtbl>(),
        64usize,
        concat!("Size of: ", stringify!(IADLXDisplayCustomResolutionVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayCustomResolutionVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayCustomResolutionVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolutionVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolutionVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolutionVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolutionVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetResolutionList) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolutionVtbl),
            "::",
            stringify!(GetResolutionList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentAppliedResolution) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolutionVtbl),
            "::",
            stringify!(GetCurrentAppliedResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateNewResolution) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolutionVtbl),
            "::",
            stringify!(CreateNewResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeleteResolution) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolutionVtbl),
            "::",
            stringify!(DeleteResolution)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayCustomResolution {
    pub pVtbl: *const IADLXDisplayCustomResolutionVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayCustomResolution() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayCustomResolution> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayCustomResolution>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayCustomResolution))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayCustomResolution>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayCustomResolution))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayCustomResolution),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayVariBrightVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVariBright) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVariBright) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVariBright,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVariBright,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVariBright,
            enabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabled: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVariBright, enabled: adlx_bool) -> ADLX_RESULT,
    >,
    pub IsCurrentMaximizeBrightness: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVariBright,
            maximizeBrightness: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsCurrentOptimizeBrightness: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVariBright,
            optimizeBrightness: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsCurrentBalanced: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVariBright,
            balanced: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsCurrentOptimizeBattery: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVariBright,
            optimizeBattery: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsCurrentMaximizeBattery: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayVariBright,
            maximizeBattery: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetMaximizeBrightness: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVariBright) -> ADLX_RESULT,
    >,
    pub SetOptimizeBrightness: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVariBright) -> ADLX_RESULT,
    >,
    pub SetBalanced: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVariBright) -> ADLX_RESULT,
    >,
    pub SetOptimizeBattery: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVariBright) -> ADLX_RESULT,
    >,
    pub SetMaximizeBattery: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayVariBright) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayVariBrightVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayVariBrightVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayVariBrightVtbl>(),
        128usize,
        concat!("Size of: ", stringify!(IADLXDisplayVariBrightVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayVariBrightVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayVariBrightVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnabled) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(SetEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCurrentMaximizeBrightness) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(IsCurrentMaximizeBrightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCurrentOptimizeBrightness) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(IsCurrentOptimizeBrightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCurrentBalanced) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(IsCurrentBalanced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCurrentOptimizeBattery) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(IsCurrentOptimizeBattery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCurrentMaximizeBattery) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(IsCurrentMaximizeBattery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMaximizeBrightness) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(SetMaximizeBrightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetOptimizeBrightness) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(SetOptimizeBrightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetBalanced) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(SetBalanced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetOptimizeBattery) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(SetOptimizeBattery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetMaximizeBattery) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBrightVtbl),
            "::",
            stringify!(SetMaximizeBattery)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayVariBright {
    pub pVtbl: *const IADLXDisplayVariBrightVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayVariBright() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayVariBright> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayVariBright>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayVariBright))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayVariBright>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayVariBright))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVariBright),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayConnectivityExperienceVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayConnectivityExperience) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayConnectivityExperience) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedHDMIQualityDetection: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsSupportedDPLink: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabledHDMIQualityDetection: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            enabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetEnabledHDMIQualityDetection: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            enabled: adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub GetDPLinkRate: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            linkRate: *mut ADLX_DP_LINK_RATE,
        ) -> ADLX_RESULT,
    >,
    pub GetNumberOfActiveLanes: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            numActiveLanes: *mut adlx_uint,
        ) -> ADLX_RESULT,
    >,
    pub GetNumberOfTotalLanes: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            numTotalLanes: *mut adlx_uint,
        ) -> ADLX_RESULT,
    >,
    pub GetRelativePreEmphasis: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            relativePreEmphasis: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetRelativePreEmphasis: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            relativePreEmphasis: adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub GetRelativeVoltageSwing: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            relativeVoltageSwing: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub SetRelativeVoltageSwing: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            relativeVoltageSwing: adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub IsEnabledLinkProtection: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayConnectivityExperience,
            enabled: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayConnectivityExperienceVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayConnectivityExperienceVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayConnectivityExperienceVtbl>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayConnectivityExperienceVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsSupportedHDMIQualityDetection) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(IsSupportedHDMIQualityDetection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupportedDPLink) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(IsSupportedDPLink)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsEnabledHDMIQualityDetection) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(IsEnabledHDMIQualityDetection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).SetEnabledHDMIQualityDetection) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(SetEnabledHDMIQualityDetection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDPLinkRate) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(GetDPLinkRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfActiveLanes) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(GetNumberOfActiveLanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfTotalLanes) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(GetNumberOfTotalLanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetRelativePreEmphasis) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(GetRelativePreEmphasis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetRelativePreEmphasis) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(SetRelativePreEmphasis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetRelativeVoltageSwing) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(GetRelativeVoltageSwing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetRelativeVoltageSwing) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(SetRelativeVoltageSwing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabledLinkProtection) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperienceVtbl),
            "::",
            stringify!(IsEnabledLinkProtection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayConnectivityExperience {
    pub pVtbl: *const IADLXDisplayConnectivityExperienceVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayConnectivityExperience() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayConnectivityExperience> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayConnectivityExperience>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayConnectivityExperience))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayConnectivityExperience>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayConnectivityExperience)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayConnectivityExperience),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayBlankingVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayBlanking) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayBlanking) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayBlanking,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub IsSupported: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayBlanking,
            supported: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsCurrentBlanked: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayBlanking,
            blanked: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub IsCurrentUnblanked: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayBlanking,
            unBlanked: *mut adlx_bool,
        ) -> ADLX_RESULT,
    >,
    pub SetBlanked: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayBlanking) -> ADLX_RESULT,
    >,
    pub SetUnblanked: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayBlanking) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayBlankingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayBlankingVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayBlankingVtbl>(),
        64usize,
        concat!("Size of: ", stringify!(IADLXDisplayBlankingVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayBlankingVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayBlankingVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlankingVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlankingVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlankingVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlankingVtbl),
            "::",
            stringify!(IsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCurrentBlanked) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlankingVtbl),
            "::",
            stringify!(IsCurrentBlanked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCurrentUnblanked) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlankingVtbl),
            "::",
            stringify!(IsCurrentUnblanked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetBlanked) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlankingVtbl),
            "::",
            stringify!(SetBlanked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetUnblanked) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlankingVtbl),
            "::",
            stringify!(SetUnblanked)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayBlanking {
    pub pVtbl: *const IADLXDisplayBlankingVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayBlanking() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayBlanking> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayBlanking>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayBlanking))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayBlanking>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayBlanking))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayBlanking),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGamut {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGamma {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplay3DLUT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayVtbl {
    pub Acquire: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplay) -> adlx_long>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplay) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub ManufacturerID: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            manufacturerID: *mut adlx_uint,
        ) -> ADLX_RESULT,
    >,
    pub DisplayType: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            displayType: *mut ADLX_DISPLAY_TYPE,
        ) -> ADLX_RESULT,
    >,
    pub ConnectorType: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            connectType: *mut ADLX_DISPLAY_CONNECTOR_TYPE,
        ) -> ADLX_RESULT,
    >,
    pub Name: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            displayName: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub EDID: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            edid: *mut *const ::std::os::raw::c_char,
        ) -> ADLX_RESULT,
    >,
    pub NativeResolution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            maxHResolution: *mut adlx_int,
            maxVResolution: *mut adlx_int,
        ) -> ADLX_RESULT,
    >,
    pub RefreshRate: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            refreshRate: *mut adlx_double,
        ) -> ADLX_RESULT,
    >,
    pub PixelClock: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplay, pixelClock: *mut adlx_uint) -> ADLX_RESULT,
    >,
    pub ScanType: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay,
            scanType: *mut ADLX_DISPLAY_SCAN_TYPE,
        ) -> ADLX_RESULT,
    >,
    pub GetGPU: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplay, ppGPU: *mut *mut IADLXGPU) -> ADLX_RESULT,
    >,
    pub UniqueId: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplay, uniqueId: *mut adlx_size) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayVtbl>(),
        112usize,
        concat!("Size of: ", stringify!(IADLXDisplayVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ManufacturerID) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(ManufacturerID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(DisplayType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectorType) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(ConnectorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EDID) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(EDID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NativeResolution) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(NativeResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefreshRate) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(RefreshRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PixelClock) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(PixelClock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScanType) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(ScanType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPU) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(GetGPU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UniqueId) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayVtbl),
            "::",
            stringify!(UniqueId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplay {
    pub pVtbl: *const IADLXDisplayVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplay() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplay> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplay>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplay))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplay>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplay))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayListVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayList) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayList) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayList,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub Size:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayList) -> adlx_uint>,
    pub Empty:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayList) -> adlx_bool>,
    pub Begin:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayList) -> adlx_uint>,
    pub End: ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayList) -> adlx_uint>,
    pub At: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub Clear:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayList) -> ADLX_RESULT>,
    pub Remove_Back:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayList) -> ADLX_RESULT>,
    pub Add_Back: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayList,
            pItem: *mut IADLXInterface,
        ) -> ADLX_RESULT,
    >,
    pub At_DisplayList: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayList,
            location: adlx_uint,
            ppItem: *mut *mut IADLXDisplay,
        ) -> ADLX_RESULT,
    >,
    pub Add_Back_DisplayList: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayList, pItem: *mut IADLXDisplay) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayListVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayListVtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayListVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLXDisplayListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayListVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(End)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(At)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clear) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove_Back) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Remove_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Add_Back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).At_DisplayList) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(At_DisplayList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Add_Back_DisplayList) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListVtbl),
            "::",
            stringify!(Add_Back_DisplayList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayList {
    pub pVtbl: *const IADLXDisplayListVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayList() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayList>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayList))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayList>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayList),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayListChangedListenerVtbl {
    pub OnDisplayListChanged: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayListChangedListener,
            pNewDisplay: *mut IADLXDisplayList,
        ) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayListChangedListenerVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayListChangedListenerVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayListChangedListenerVtbl>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayListChangedListenerVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayListChangedListenerVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayListChangedListenerVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnDisplayListChanged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListChangedListenerVtbl),
            "::",
            stringify!(OnDisplayListChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayListChangedListener {
    pub pVtbl: *const IADLXDisplayListChangedListenerVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayListChangedListener() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayListChangedListener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayListChangedListener>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayListChangedListener))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayListChangedListener>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayListChangedListener))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayListChangedListener),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGamutChangedEventVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGamutChangedEvent) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGamutChangedEvent) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGamutChangedEvent,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetOrigin: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGamutChangedEvent) -> ADLX_SYNC_ORIGIN,
    >,
    pub GetDisplay: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGamutChangedEvent,
            ppDisplay: *mut *mut IADLXDisplay,
        ) -> ADLX_RESULT,
    >,
    pub IsWhitePointChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGamutChangedEvent) -> adlx_bool,
    >,
    pub IsColorSpaceChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGamutChangedEvent) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGamutChangedEventVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGamutChangedEventVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGamutChangedEventVtbl>(),
        56usize,
        concat!("Size of: ", stringify!(IADLXDisplayGamutChangedEventVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGamutChangedEventVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayGamutChangedEventVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedEventVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedEventVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedEventVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetOrigin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedEventVtbl),
            "::",
            stringify!(GetOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDisplay) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedEventVtbl),
            "::",
            stringify!(GetDisplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsWhitePointChanged) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedEventVtbl),
            "::",
            stringify!(IsWhitePointChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsColorSpaceChanged) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedEventVtbl),
            "::",
            stringify!(IsColorSpaceChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGamutChangedEvent {
    pub pVtbl: *const IADLXDisplayGamutChangedEventVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGamutChangedEvent() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGamutChangedEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGamutChangedEvent>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayGamutChangedEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGamutChangedEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayGamutChangedEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedEvent),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGamutChangedListenerVtbl {
    pub OnDisplayGamutChanged: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGamutChangedListener,
            pDisplayGamutChangedEvent: *mut IADLXDisplayGamutChangedEvent,
        ) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGamutChangedListenerVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGamutChangedListenerVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGamutChangedListenerVtbl>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(IADLXDisplayGamutChangedListenerVtbl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGamutChangedListenerVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayGamutChangedListenerVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnDisplayGamutChanged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedListenerVtbl),
            "::",
            stringify!(OnDisplayGamutChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGamutChangedListener {
    pub pVtbl: *const IADLXDisplayGamutChangedListenerVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGamutChangedListener() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGamutChangedListener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGamutChangedListener>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayGamutChangedListener))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGamutChangedListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayGamutChangedListener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGamutChangedListener),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGammaChangedEventVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGammaChangedEvent) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGammaChangedEvent) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGammaChangedEvent,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetOrigin: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGammaChangedEvent) -> ADLX_SYNC_ORIGIN,
    >,
    pub GetDisplay: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGammaChangedEvent,
            ppDisplay: *mut *mut IADLXDisplay,
        ) -> ADLX_RESULT,
    >,
    pub IsGammaRampChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGammaChangedEvent) -> adlx_bool,
    >,
    pub IsGammaCoefficientChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGammaChangedEvent) -> adlx_bool,
    >,
    pub IsReGammaChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGammaChangedEvent) -> adlx_bool,
    >,
    pub IsDeGammaChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayGammaChangedEvent) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGammaChangedEventVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGammaChangedEventVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGammaChangedEventVtbl>(),
        72usize,
        concat!("Size of: ", stringify!(IADLXDisplayGammaChangedEventVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGammaChangedEventVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayGammaChangedEventVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetOrigin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(GetOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDisplay) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(GetDisplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsGammaRampChanged) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(IsGammaRampChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsGammaCoefficientChanged) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(IsGammaCoefficientChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsReGammaChanged) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(IsReGammaChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsDeGammaChanged) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEventVtbl),
            "::",
            stringify!(IsDeGammaChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGammaChangedEvent {
    pub pVtbl: *const IADLXDisplayGammaChangedEventVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGammaChangedEvent() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGammaChangedEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGammaChangedEvent>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayGammaChangedEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGammaChangedEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayGammaChangedEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedEvent),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGammaChangedListenerVtbl {
    pub OnDisplayGammaChanged: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayGammaChangedListener,
            pDisplayGammaChangedEvent: *mut IADLXDisplayGammaChangedEvent,
        ) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGammaChangedListenerVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGammaChangedListenerVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGammaChangedListenerVtbl>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(IADLXDisplayGammaChangedListenerVtbl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGammaChangedListenerVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayGammaChangedListenerVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnDisplayGammaChanged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedListenerVtbl),
            "::",
            stringify!(OnDisplayGammaChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayGammaChangedListener {
    pub pVtbl: *const IADLXDisplayGammaChangedListenerVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayGammaChangedListener() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayGammaChangedListener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayGammaChangedListener>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayGammaChangedListener))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayGammaChangedListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplayGammaChangedListener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayGammaChangedListener),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplay3DLUTChangedEventVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplay3DLUTChangedEvent) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplay3DLUTChangedEvent) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay3DLUTChangedEvent,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetOrigin: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplay3DLUTChangedEvent) -> ADLX_SYNC_ORIGIN,
    >,
    pub GetDisplay: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay3DLUTChangedEvent,
            ppDisplay: *mut *mut IADLXDisplay,
        ) -> ADLX_RESULT,
    >,
    pub IsSCEChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplay3DLUTChangedEvent) -> adlx_bool,
    >,
    pub IsCustom3DLUTChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplay3DLUTChangedEvent) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplay3DLUTChangedEventVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplay3DLUTChangedEventVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplay3DLUTChangedEventVtbl>(),
        56usize,
        concat!("Size of: ", stringify!(IADLXDisplay3DLUTChangedEventVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplay3DLUTChangedEventVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplay3DLUTChangedEventVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedEventVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedEventVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedEventVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetOrigin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedEventVtbl),
            "::",
            stringify!(GetOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDisplay) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedEventVtbl),
            "::",
            stringify!(GetDisplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSCEChanged) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedEventVtbl),
            "::",
            stringify!(IsSCEChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCustom3DLUTChanged) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedEventVtbl),
            "::",
            stringify!(IsCustom3DLUTChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplay3DLUTChangedEvent {
    pub pVtbl: *const IADLXDisplay3DLUTChangedEventVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplay3DLUTChangedEvent() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplay3DLUTChangedEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplay3DLUTChangedEvent>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplay3DLUTChangedEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplay3DLUTChangedEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplay3DLUTChangedEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedEvent),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplay3DLUTChangedListenerVtbl {
    pub OnDisplay3DLUTChanged: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplay3DLUTChangedListener,
            pDisplay3DLUTChangedEvent: *mut IADLXDisplay3DLUTChangedEvent,
        ) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplay3DLUTChangedListenerVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplay3DLUTChangedListenerVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplay3DLUTChangedListenerVtbl>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(IADLXDisplay3DLUTChangedListenerVtbl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplay3DLUTChangedListenerVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplay3DLUTChangedListenerVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnDisplay3DLUTChanged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedListenerVtbl),
            "::",
            stringify!(OnDisplay3DLUTChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplay3DLUTChangedListener {
    pub pVtbl: *const IADLXDisplay3DLUTChangedListenerVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplay3DLUTChangedListener() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplay3DLUTChangedListener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplay3DLUTChangedListener>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplay3DLUTChangedListener))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplay3DLUTChangedListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplay3DLUTChangedListener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplay3DLUTChangedListener),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplaySettingsChangedEventVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplaySettingsChangedEvent,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetOrigin: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> ADLX_SYNC_ORIGIN,
    >,
    pub GetDisplay: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplaySettingsChangedEvent,
            ppDisplay: *mut *mut IADLXDisplay,
        ) -> ADLX_RESULT,
    >,
    pub IsFreeSyncChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsVSRChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsGPUScalingChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsScalingModeChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsIntegerScalingChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsColorDepthChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsPixelFormatChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsHDCPChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsCustomColorHueChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsCustomColorSaturationChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsCustomColorBrightnessChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsCustomColorTemperatureChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsCustomColorContrastChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsCustomResolutionChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
    pub IsVariBrightChanged: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplaySettingsChangedEvent) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplaySettingsChangedEventVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplaySettingsChangedEventVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplaySettingsChangedEventVtbl>(),
        160usize,
        concat!(
            "Size of: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplaySettingsChangedEventVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetOrigin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(GetOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDisplay) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(GetDisplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsFreeSyncChanged) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsFreeSyncChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsVSRChanged) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsVSRChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsGPUScalingChanged) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsGPUScalingChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsScalingModeChanged) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsScalingModeChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsIntegerScalingChanged) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsIntegerScalingChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsColorDepthChanged) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsColorDepthChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsPixelFormatChanged) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsPixelFormatChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsHDCPChanged) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsHDCPChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCustomColorHueChanged) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsCustomColorHueChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsCustomColorSaturationChanged) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsCustomColorSaturationChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsCustomColorBrightnessChanged) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsCustomColorBrightnessChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsCustomColorTemperatureChanged) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsCustomColorTemperatureChanged)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IsCustomColorContrastChanged) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsCustomColorContrastChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsCustomResolutionChanged) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsCustomResolutionChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsVariBrightChanged) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEventVtbl),
            "::",
            stringify!(IsVariBrightChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplaySettingsChangedEvent {
    pub pVtbl: *const IADLXDisplaySettingsChangedEventVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplaySettingsChangedEvent() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplaySettingsChangedEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplaySettingsChangedEvent>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplaySettingsChangedEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplaySettingsChangedEvent>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplaySettingsChangedEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedEvent),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplaySettingsChangedListenerVtbl {
    pub OnDisplaySettingsChanged: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplaySettingsChangedListener,
            pDisplaySettingChangedEvent: *mut IADLXDisplaySettingsChangedEvent,
        ) -> adlx_bool,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplaySettingsChangedListenerVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplaySettingsChangedListenerVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplaySettingsChangedListenerVtbl>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(IADLXDisplaySettingsChangedListenerVtbl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplaySettingsChangedListenerVtbl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplaySettingsChangedListenerVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnDisplaySettingsChanged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedListenerVtbl),
            "::",
            stringify!(OnDisplaySettingsChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplaySettingsChangedListener {
    pub pVtbl: *const IADLXDisplaySettingsChangedListenerVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplaySettingsChangedListener() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplaySettingsChangedListener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplaySettingsChangedListener>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplaySettingsChangedListener))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplaySettingsChangedListener>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IADLXDisplaySettingsChangedListener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplaySettingsChangedListener),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayChangedHandlingVtbl {
    pub Acquire: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayChangedHandling) -> adlx_long,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(pThis: *mut IADLXDisplayChangedHandling) -> adlx_long,
    >,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub AddDisplayListEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplayListChangedListener: *mut IADLXDisplayListChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub RemoveDisplayListEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplayListChangedListener: *mut IADLXDisplayListChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub AddDisplayGamutEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplayGamutChangedListener: *mut IADLXDisplayGamutChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub RemoveDisplayGamutEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplayGamutChangedListener: *mut IADLXDisplayGamutChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub AddDisplayGammaEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplayGammaChangedListener: *mut IADLXDisplayGammaChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub RemoveDisplayGammaEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplayGammaChangedListener: *mut IADLXDisplayGammaChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub AddDisplay3DLUTEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplay3DLUTChangedListener: *mut IADLXDisplay3DLUTChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub RemoveDisplay3DLUTEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplay3DLUTChangedListener: *mut IADLXDisplay3DLUTChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub AddDisplaySettingsEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplaySettingsChangedListener: *mut IADLXDisplaySettingsChangedListener,
        ) -> ADLX_RESULT,
    >,
    pub RemoveDisplaySettingsEventListener: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayChangedHandling,
            pDisplaySettingsChangedListener: *mut IADLXDisplaySettingsChangedListener,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayChangedHandlingVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayChangedHandlingVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayChangedHandlingVtbl>(),
        104usize,
        concat!("Size of: ", stringify!(IADLXDisplayChangedHandlingVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayChangedHandlingVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayChangedHandlingVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddDisplayListEventListener) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(AddDisplayListEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RemoveDisplayListEventListener) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(RemoveDisplayListEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).AddDisplayGamutEventListener) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(AddDisplayGamutEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RemoveDisplayGamutEventListener) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(RemoveDisplayGamutEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).AddDisplayGammaEventListener) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(AddDisplayGammaEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RemoveDisplayGammaEventListener) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(RemoveDisplayGammaEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).AddDisplay3DLUTEventListener) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(AddDisplay3DLUTEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RemoveDisplay3DLUTEventListener) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(RemoveDisplay3DLUTEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).AddDisplaySettingsEventListener) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(AddDisplaySettingsEventListener)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RemoveDisplaySettingsEventListener) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandlingVtbl),
            "::",
            stringify!(RemoveDisplaySettingsEventListener)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayChangedHandling {
    pub pVtbl: *const IADLXDisplayChangedHandlingVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayChangedHandling() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayChangedHandling> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayChangedHandling>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayChangedHandling))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayChangedHandling>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayChangedHandling))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayChangedHandling),
            "::",
            stringify!(pVtbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayServicesVtbl {
    pub Acquire:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayServices) -> adlx_long>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(pThis: *mut IADLXDisplayServices) -> adlx_long>,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            interfaceId: *const wchar_t,
            ppInterface: *mut *mut ::std::os::raw::c_void,
        ) -> ADLX_RESULT,
    >,
    pub GetNumberOfDisplays: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            numDisplays: *mut adlx_uint,
        ) -> ADLX_RESULT,
    >,
    pub GetDisplays: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            ppDisplays: *mut *mut IADLXDisplayList,
        ) -> ADLX_RESULT,
    >,
    pub Get3DLUT: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppDisp3DLUT: *mut *mut IADLXDisplay3DLUT,
        ) -> ADLX_RESULT,
    >,
    pub GetGamut: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppDispGamut: *mut *mut IADLXDisplayGamut,
        ) -> ADLX_RESULT,
    >,
    pub GetGamma: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppDispGamma: *mut *mut IADLXDisplayGamma,
        ) -> ADLX_RESULT,
    >,
    pub GetDisplayChangedHandling: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            ppDisplayChangedHandling: *mut *mut IADLXDisplayChangedHandling,
        ) -> ADLX_RESULT,
    >,
    pub GetFreeSync: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppFreeSync: *mut *mut IADLXDisplayFreeSync,
        ) -> ADLX_RESULT,
    >,
    pub GetVirtualSuperResolution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppVSR: *mut *mut IADLXDisplayVSR,
        ) -> ADLX_RESULT,
    >,
    pub GetGPUScaling: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppGPUScaling: *mut *mut IADLXDisplayGPUScaling,
        ) -> ADLX_RESULT,
    >,
    pub GetScalingMode: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppScalingMode: *mut *mut IADLXDisplayScalingMode,
        ) -> ADLX_RESULT,
    >,
    pub GetIntegerScaling: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppIntegerScaling: *mut *mut IADLXDisplayIntegerScaling,
        ) -> ADLX_RESULT,
    >,
    pub GetColorDepth: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppColorDepth: *mut *mut IADLXDisplayColorDepth,
        ) -> ADLX_RESULT,
    >,
    pub GetPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppPixelFormat: *mut *mut IADLXDisplayPixelFormat,
        ) -> ADLX_RESULT,
    >,
    pub GetCustomColor: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppCustomColor: *mut *mut IADLXDisplayCustomColor,
        ) -> ADLX_RESULT,
    >,
    pub GetHDCP: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppHDCP: *mut *mut IADLXDisplayHDCP,
        ) -> ADLX_RESULT,
    >,
    pub GetCustomResolution: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppCustomResolution: *mut *mut IADLXDisplayCustomResolution,
        ) -> ADLX_RESULT,
    >,
    pub GetVariBright: ::std::option::Option<
        unsafe extern "C" fn(
            pThis: *mut IADLXDisplayServices,
            pDisplay: *mut IADLXDisplay,
            ppVariBright: *mut *mut IADLXDisplayVariBright,
        ) -> ADLX_RESULT,
    >,
}
#[test]
fn bindgen_test_layout_IADLXDisplayServicesVtbl() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayServicesVtbl> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayServicesVtbl>(),
        160usize,
        concat!("Size of: ", stringify!(IADLXDisplayServicesVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayServicesVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayServicesVtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Acquire) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(Acquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfDisplays) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetNumberOfDisplays)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDisplays) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetDisplays)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Get3DLUT) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(Get3DLUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGamut) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetGamut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGamma) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetGamma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDisplayChangedHandling) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetDisplayChangedHandling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFreeSync) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetFreeSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetVirtualSuperResolution) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetVirtualSuperResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetGPUScaling) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetGPUScaling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetScalingMode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetScalingMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIntegerScaling) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetIntegerScaling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetColorDepth) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetColorDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPixelFormat) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCustomColor) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetCustomColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetHDCP) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetHDCP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCustomResolution) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetCustomResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetVariBright) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServicesVtbl),
            "::",
            stringify!(GetVariBright)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IADLXDisplayServices {
    pub pVtbl: *const IADLXDisplayServicesVtbl,
}
#[test]
fn bindgen_test_layout_IADLXDisplayServices() {
    const UNINIT: ::std::mem::MaybeUninit<IADLXDisplayServices> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IADLXDisplayServices>(),
        8usize,
        concat!("Size of: ", stringify!(IADLXDisplayServices))
    );
    assert_eq!(
        ::std::mem::align_of::<IADLXDisplayServices>(),
        8usize,
        concat!("Alignment of ", stringify!(IADLXDisplayServices))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IADLXDisplayServices),
            "::",
            stringify!(pVtbl)
        )
    );
}
